Index: 5_2_1/sapi/apache/mod_php5.c
===================================================================
--- 5_2_1.orig/sapi/apache/mod_php5.c
+++ 5_2_1/sapi/apache/mod_php5.c
@@ -22,6 +22,8 @@
 #include "php_apache_http.h"
 #include "http_conf_globals.h"
 
+#include "ext/apollo/php_apollo.h"
+
 #ifdef NETWARE
 #define SIGPIPE SIGINT
 #endif
@@ -943,6 +945,7 @@ static void php_init_handler(server_rec 
 	{
 		TSRMLS_FETCH();
 		if (PG(expose_php)) {
+			ap_add_version_component("Zend Core/" APOLLO_VERSION);
 			ap_add_version_component("PHP/" PHP_VERSION);
 		}
 	}
Index: 5_2_1/sapi/apache2handler/sapi_apache2.c
===================================================================
--- 5_2_1.orig/sapi/apache2handler/sapi_apache2.c
+++ 5_2_1/sapi/apache2handler/sapi_apache2.c
@@ -53,6 +53,8 @@
 
 #include "php_apache.h"
 
+#include "ext/apollo/php_apollo.h"
+
 /* UnixWare and Netware define shutdown to _shutdown, which causes problems later
  * on when using a structure member named shutdown. Since this source
  * file does not use the system call shutdown, it is safe to #undef it.K
@@ -364,6 +366,7 @@ static void php_apache_add_version(apr_p
 {
 	TSRMLS_FETCH();
 	if (PG(expose_php)) {
+		ap_add_version_component(p, "Zend Core/" APOLLO_VERSION);
 		ap_add_version_component(p, "PHP/" PHP_VERSION);
 	}
 }
Index: 5_2_1/sapi/cgi/cgi_main.c
===================================================================
--- 5_2_1.orig/sapi/cgi/cgi_main.c
+++ 5_2_1/sapi/cgi/cgi_main.c
@@ -142,6 +142,7 @@ static const opt_struct OPTIONS[] = {
 	{'?', 0, "usage"},/* help alias (both '?' and 'usage') */
 	{'v', 0, "version"},
 	{'z', 1, "zend-extension"},
+ 	{'R', 1, "repeat"},
 	{'-', 0, NULL} /* end of args */
 };
 
@@ -1145,6 +1146,9 @@ int main(int argc, char *argv[])
 	int status = 0;
 #endif
 #endif /* PHP_FASTCGI */
+	int benchmark = 0;
+	int repeats = 1;
+	struct timeval start, end;
 
 #if 0 && defined(PHP_DEBUG)
 	/* IIS is always making things more difficult.  This allows
@@ -1392,6 +1396,10 @@ consult the installation file that came 
 			exit(1);
 		}
 
+		if (fcgi_in_shutdown()) {
+			exit(0);
+		}
+
 		while (parent) {
 			do {
 #ifdef DEBUG_FASTCGI
@@ -1442,6 +1450,10 @@ consult the installation file that came 
 	zend_first_try {
 		while ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 1)) != -1) {
 			switch (c) {
+				case 'R': 
+				        benchmark = 1;
+						repeats = atoi(php_optarg);
+						break;
 				case 'h':
 				case '?':
 					no_headers = 1;
@@ -1456,6 +1468,9 @@ consult the installation file that came 
 		}
 		php_optind = orig_optind;
 		php_optarg = orig_optarg;
+		if (benchmark) {
+			gettimeofday(&start, NULL);
+		}
 
 #if PHP_FASTCGI
 		/* start of FAST CGI loop */
@@ -1809,11 +1824,12 @@ fastcgi_request_done:
 
 		}
 
+		repeats--;
 #if PHP_FASTCGI
-			if (!fastcgi) break;
+			if (!fastcgi && repeats <= 0) break;
 			/* only fastcgi will get here */
 			requests++;
-			if (max_requests && (requests == max_requests)) {
+			if (fastcgi && max_requests && (requests == max_requests)) {
 				fcgi_finish_request(&request);
 #ifndef PHP_WIN32
 				if (bindpath) {
@@ -1822,6 +1838,9 @@ fastcgi_request_done:
 #endif
 				break;
 			}
+			php_optind = orig_optind;
+			php_optarg = orig_optarg;
+
 			/* end of fastcgi loop */
 		}
 #endif
@@ -1836,6 +1855,18 @@ fastcgi_request_done:
 		exit_status = 255;
 	} zend_end_try();
 
+	if (benchmark) {
+		gettimeofday(&end, NULL);
+		end.tv_sec -= start.tv_sec;
+		if (end.tv_usec >= start.tv_usec) {
+			end.tv_usec -= start.tv_usec;
+		} else {
+			end.tv_sec -= 1;
+			end.tv_usec = end.tv_usec + 1000000 - start.tv_usec;
+		}
+		fprintf(stderr, "\nElapsed time: %d.%06d sec\n", end.tv_sec, start.tv_usec);
+	}
+
 	SG(server_context) = NULL;
 	php_module_shutdown(TSRMLS_C);
 	sapi_shutdown();
Index: 5_2_1/ext/imap/config.m4
===================================================================
--- 5_2_1.orig/ext/imap/config.m4
+++ 5_2_1/ext/imap/config.m4
@@ -137,7 +137,7 @@ if test "$PHP_IMAP" != "no"; then  
     if test "$ac_cv_utf8_mime2text" = "new"; then
       AC_DEFINE(HAVE_NEW_MIME2TEXT, 1, [Whether utf8_mime2text() has new signature])
     fi
-    CFLAGS=$old_CPPFLAGS
+    CFLAGS=$old_CFLAGS
 
     old_CFLAGS=$CFLAGS
     CFLAGS="-I$IMAP_INC_DIR"
@@ -152,7 +152,7 @@ if test "$PHP_IMAP" != "no"; then  
          ac_cv_u8t_canonical=no
       ])
     )
-    CFLAGS=$old_CPPFLAGS
+    CFLAGS=$old_CFLAGS
 
     if test "$ac_cv_u8t_canonical" = "no" && test "$ac_cv_utf8_mime2text" = "new"; then
 		AC_MSG_ERROR([utf8_mime2text() has new signature, but U8T_CANONICAL is missing. This should not happen. Check config.log for additional information.])
Index: 5_2_1/ext/standard/string.c
===================================================================
--- 5_2_1.orig/ext/standard/string.c
+++ 5_2_1/ext/standard/string.c
@@ -3148,7 +3148,7 @@ PHPAPI int php_char_to_str_ex(char *str,
 	}
 	
 	Z_STRLEN_P(result) = len + (char_count * (to_len - 1));
-	Z_STRVAL_P(result) = target = safe_emalloc(char_count, to_len, len);
+	Z_STRVAL_P(result) = target = safe_emalloc(char_count, to_len, len + 1);
 	Z_TYPE_P(result) = IS_STRING;
 
 	if (case_sensitivity) {
@@ -5063,11 +5063,16 @@ PHP_FUNCTION(substr_compare)
 		offset = (offset < 0) ? 0 : offset;
 	}
 
-	if ((offset + len) > s1_len) {
+	if(offset > s1_len) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "The start position cannot exceed initial string length");
 		RETURN_FALSE;
 	}
 
+	if(len > s1_len - offset) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "The length cannot exceed initial string length");
+		RETURN_FALSE;
+	}
+
 	cmp_len = (uint) (len ? len : MAX(s2_len, (s1_len - offset)));
 
 	if (!cs) {
Index: 5_2_1/ext/reflection/php_reflection.c
===================================================================
--- 5_2_1.orig/ext/reflection/php_reflection.c
+++ 5_2_1/ext/reflection/php_reflection.c
@@ -1142,14 +1142,19 @@ static void reflection_property_factory(
 
 	if (!(prop->flags & ZEND_ACC_PRIVATE)) {
 		/* we have to search the class hierarchy for this (implicit) public or protected property */
-		zend_class_entry *tmp_ce = ce;
-		zend_property_info *tmp_info;
-		
+		zend_class_entry *tmp_ce = ce, *store_ce = ce;
+		zend_property_info *tmp_info = NULL;
+
 		while (tmp_ce && zend_hash_find(&tmp_ce->properties_info, prop_name, strlen(prop_name) + 1, (void **) &tmp_info) != SUCCESS) {
 			ce = tmp_ce;
-			prop = tmp_info;
 			tmp_ce = tmp_ce->parent;
 		}
+
+		if (tmp_info && !(tmp_info->flags & ZEND_ACC_SHADOW)) { /* found something and it's not a parent's private */
+			prop = tmp_info;
+		} else { /* not found, use initial value */
+			ce = store_ce;
+		}
 	}
 
 	MAKE_STD_ZVAL(name);
Index: 5_2_1/ext/posix/posix.c
===================================================================
--- 5_2_1.orig/ext/posix/posix.c
+++ 5_2_1/ext/posix/posix.c
@@ -872,7 +872,7 @@ PHP_FUNCTION(posix_getgrnam)
 PHP_FUNCTION(posix_getgrgid)
 {
 	long gid;
-#ifdef HAVE_GETGRGID_R
+#if defined(ZTS) && defined(HAVE_GETGRGID_R) && defined(_SC_GETGR_R_SIZE_MAX)
 	int ret;
 	struct group _g;
 	struct group *retgrptr;
@@ -884,7 +884,7 @@ PHP_FUNCTION(posix_getgrgid)
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &gid) == FAILURE) {
 		RETURN_FALSE;
 	}
-#ifdef HAVE_GETGRGID_R
+#if defined(ZTS) && defined(HAVE_GETGRGID_R) && defined(_SC_GETGR_R_SIZE_MAX)
 	
 	grbuflen = sysconf(_SC_GETGR_R_SIZE_MAX);
 	grbuf = emalloc(grbuflen);
@@ -909,7 +909,7 @@ PHP_FUNCTION(posix_getgrgid)
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "unable to convert posix group struct to array");
 		RETVAL_FALSE;
 	}
-#ifdef HAVE_GETGRGID_R
+#if defined(ZTS) && defined(HAVE_GETGRGID_R) && defined(_SC_GETGR_R_SIZE_MAX)
 	efree(grbuf);
 #endif
 }
Index: 5_2_1/ext/gd/gd.c
===================================================================
--- 5_2_1.orig/ext/gd/gd.c
+++ 5_2_1/ext/gd/gd.c
@@ -4338,11 +4338,6 @@ PHP_FUNCTION(imagepstext)
 	T1_TMATRIX *transform = NULL;
 	char *str;
 	int str_len;
-	int argc = ZEND_NUM_ARGS();
-
-	if (argc != 8 && argc != 12) {
-		ZEND_WRONG_PARAM_COUNT();
-	}
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rsrlllll|lldl", &img, &str, &str_len, &fnt, &size, &_fg, &_bg, &x, &y, &space, &width, &angle, &aa_steps) == FAILURE) {
 		return;
Index: 5_2_1/ext/simplexml/simplexml.c
===================================================================
--- 5_2_1.orig/ext/simplexml/simplexml.c
+++ 5_2_1/ext/simplexml/simplexml.c
@@ -56,6 +56,7 @@ static php_sxe_object* php_sxe_object_ne
 static zend_object_value php_sxe_register_object(php_sxe_object * TSRMLS_DC);
 static xmlNodePtr php_sxe_reset_iterator(php_sxe_object *sxe, int use_data TSRMLS_DC);
 static xmlNodePtr php_sxe_iterator_fetch(php_sxe_object *sxe, xmlNodePtr node, int use_data TSRMLS_DC);
+static zval *sxe_get_value(zval *z TSRMLS_DC);
 
 /* {{{ _node_as_zval()
  */
@@ -427,6 +428,7 @@ static void sxe_prop_dim_write(zval *obj
 	int             is_attr = 0;
 	int				nodendx = 0;
 	int             test = 0;
+	int				new_value = 0;
 	long            cnt;
 	zval            tmp_zv, trim_zv, value_copy;
 
@@ -504,8 +506,20 @@ static void sxe_prop_dim_write(zval *obj
 				break;
 			case IS_STRING:
 				break;
+			case IS_OBJECT:
+				if (Z_OBJCE_P(value) == sxe_class_entry) {
+					value = sxe_get_value(value TSRMLS_CC);
+					INIT_PZVAL(value);
+					new_value = 1;
+					break;
+				}
+				/* break is missing intentionally */
 			default:
-				php_error_docref(NULL TSRMLS_CC, E_WARNING, "It is not yet possible to assign complex types to %s", attribs ? "attributes" : "properties");
+				if (member == &tmp_zv) {
+					zval_dtor(&tmp_zv);
+				}
+				zend_error(E_WARNING, "It is not yet possible to assign complex types to %s", attribs ? "attributes" : "properties");
+				return;
 		}
 	}
 
@@ -594,6 +608,9 @@ next_iter:
 	if (value && value == &value_copy) {
 		zval_dtor(value);
 	}
+	if (new_value) {
+		zval_ptr_dtor(&value);
+	}
 }
 /* }}} */
 
@@ -1526,7 +1543,7 @@ SXE_METHOD(addAttribute)
 
 	node = php_sxe_get_first_node(sxe, node TSRMLS_CC);
 
-	if (node->type != XML_ELEMENT_NODE) {
+	if (node && node->type != XML_ELEMENT_NODE) {
 		node = node->parent;
 	}
 
Index: 5_2_1/zend-endian-uni.diff
===================================================================
--- /dev/null
+++ 5_2_1/zend-endian-uni.diff
@@ -0,0 +1,57 @@
+Index: Zend/zend_strtod.c
+===================================================================
+RCS file: /repository/ZendEngine2/zend_strtod.c,v
+retrieving revision 1.17.2.2.2.5
+diff -u -p -d -r1.17.2.2.2.5 zend_strtod.c
+--- Zend/zend_strtod.c	26 Dec 2006 17:17:52 -0000	1.17.2.2.2.5
++++ Zend/zend_strtod.c	13 Feb 2007 10:32:28 -0000
+@@ -133,7 +133,7 @@ typedef unsigned long int uint32_t;
+ # endif
+ #endif
+ 
+-#ifdef WORDS_BIGENDIAN
++#ifdef __BIG_ENDIAN__
+ #define IEEE_BIG_ENDIAN
+ #else
+ #define IEEE_LITTLE_ENDIAN
+Index: ext/date/lib/parse_tz.c
+===================================================================
+RCS file: /repository/php-src/ext/date/lib/parse_tz.c,v
+retrieving revision 1.20.2.6.2.12
+diff -u -p -d -r1.20.2.6.2.12 parse_tz.c
+--- ext/date/lib/parse_tz.c	25 Jan 2007 14:38:45 -0000	1.20.2.6.2.12
++++ ext/date/lib/parse_tz.c	13 Feb 2007 10:32:28 -0000
+@@ -33,7 +33,7 @@
+ #endif
+ #include "timezonedb.h"
+ 
+-#ifdef WORDS_BIGENDIAN
++#ifdef __BIG_ENDIAN__ 
+ #define timelib_conv_int(l) (l)
+ #else
+ #define timelib_conv_int(l) ((l & 0x000000ff) << 24) + ((l & 0x0000ff00) << 8) + ((l & 0x00ff0000) >> 8) + ((l & 0xff000000) >> 24)
+Index: ext/hash/hash_tiger.c
+===================================================================
+RCS file: /repository/php-src/ext/hash/hash_tiger.c,v
+retrieving revision 1.4.2.4.2.2
+diff -u -p -d -r1.4.2.4.2.2 hash_tiger.c
+--- ext/hash/hash_tiger.c	8 Jan 2007 22:29:25 -0000	1.4.2.4.2.2
++++ ext/hash/hash_tiger.c	13 Feb 2007 10:32:28 -0000
+@@ -91,7 +91,7 @@
+ #define split_ex(str) \
+ 	x0=str[0]; x1=str[1]; x2=str[2]; x3=str[3]; \
+ 	x4=str[4]; x5=str[5]; x6=str[6]; x7=str[7];
+-#ifdef WORDS_BIGENDIAN
++#ifdef __BIG_ENDIAN__ 
+ #	define split(str) \
+ 	{ \
+ 		int i; \
+@@ -144,7 +144,7 @@ static inline void TigerFinalize(PHP_TIG
+ 		memset(&context->buffer[context->length], 0, 56 - context->length);
+ 	}
+ 
+-#ifndef WORDS_BIGENDIAN	
++#ifndef __BIG_ENDIAN__ 
+ 	memcpy(&context->buffer[56], &context->passed, sizeof(php_hash_uint64));
+ #else
+ 	context->buffer[56] = (unsigned char) (context->passed & 0xff);
Index: 5_2_1/ext/standard/proc_open.c
===================================================================
--- 5_2_1.orig/ext/standard/proc_open.c
+++ 5_2_1/ext/standard/proc_open.c
@@ -276,7 +276,7 @@ static int php_make_safe_mode_command(ch
 
 	sep = zend_memrchr(arg0, PHP_DIR_SEPARATOR, larg0);
 
-	spprintf(safecmd, 0, "%s%c%s%s", PG(safe_mode_exec_dir), (sep ? *sep : '/'), (sep ? "" : arg0), (space ? cmd + larg0 : ""));
+	spprintf(safecmd, 0, "%s%s%s%s", PG(safe_mode_exec_dir), (sep ? sep : "/"), (sep ? "" : arg0), (space ? cmd + larg0 : ""));
 
 	efree(arg0);
 	arg0 = php_escape_shell_cmd(*safecmd);
Index: 5_2_1/Zend/zend_strtod.c
===================================================================
--- 5_2_1.orig/Zend/zend_strtod.c
+++ 5_2_1/Zend/zend_strtod.c
@@ -763,19 +763,19 @@ static Bigint * pow5mult(Bigint *b, int 
 	int i;
 	static int p05[3] = { 5, 25, 125 };
 
+	_THREAD_PRIVATE_MUTEX_LOCK(pow5mult_mutex);
 	if ((i = k & 3)) {
 		b = multadd(b, p05[i-1], 0);
 	}
 
 	if (!(k >>= 2)) {
+		_THREAD_PRIVATE_MUTEX_UNLOCK(pow5mult_mutex);
 		return b;
 	}
 	if (!(p5 = p5s)) {
 		/* first time */
-		_THREAD_PRIVATE_MUTEX_LOCK(pow5mult_mutex);
 		p5 = p5s = i2b(625);
 		p5->next = 0;
-		_THREAD_PRIVATE_MUTEX_UNLOCK(pow5mult_mutex);
 	}
 	for(;;) {
 		if (k & 1) {
@@ -787,15 +787,14 @@ static Bigint * pow5mult(Bigint *b, int 
 			break;
 		}
 		if (!(p51 = p5->next)) {
-			_THREAD_PRIVATE_MUTEX_LOCK(pow5mult_mutex);
 			if (!(p51 = p5->next)) {
 				p51 = p5->next = mult(p5,p5);
 				p51->next = 0;
 			}
-			_THREAD_PRIVATE_MUTEX_UNLOCK(pow5mult_mutex);
 		}
 		p5 = p51;
 	}
+	_THREAD_PRIVATE_MUTEX_UNLOCK(pow5mult_mutex);
 	return b;
 }
 
Index: 5_2_1/sapi/cgi/fastcgi.c
===================================================================
--- 5_2_1.orig/sapi/cgi/fastcgi.c
+++ 5_2_1/sapi/cgi/fastcgi.c
@@ -162,6 +162,11 @@ static void fcgi_signal_handler(int sign
 
 #endif
 
+int fcgi_in_shutdown(void)
+{
+	return in_shutdown;
+}
+
 int fcgi_init(void)
 {
 	if (!is_initialized) {
Index: 5_2_1/sapi/cgi/fastcgi.h
===================================================================
--- 5_2_1.orig/sapi/cgi/fastcgi.h
+++ 5_2_1/sapi/cgi/fastcgi.h
@@ -110,6 +110,7 @@ typedef struct _fcgi_request {
 
 int fcgi_init(void);
 int fcgi_is_fastcgi(void);
+int fcgi_in_shutdown(void);
 int fcgi_listen(const char *path, int backlog);
 void fcgi_init_request(fcgi_request *req, int listen_socket);
 int fcgi_accept_request(fcgi_request *req);
Index: 5_2_1/ext/imap/php_imap.c
===================================================================
--- 5_2_1.orig/ext/imap/php_imap.c
+++ 5_2_1/ext/imap/php_imap.c
@@ -475,11 +475,11 @@ PHP_MINIT_FUNCTION(imap)
 	auth_link(&auth_gss);		/* link in the gss authenticator */
 #endif
 	auth_link(&auth_pla);		/* link in the plain authenticator */
+#endif
 
 #ifdef HAVE_IMAP_SSL
 	ssl_onceonlyinit ();
 #endif
-#endif
 
 	/* lets allow NIL */
 	REGISTER_LONG_CONSTANT("NIL", NIL, CONST_PERSISTENT | CONST_CS);
@@ -1173,7 +1173,7 @@ PHP_FUNCTION(imap_headers)
 		tmp[3] = cache->answered ? 'A' : ' ';
 		tmp[4] = cache->deleted ? 'D' : ' ';
 		tmp[5] = cache->draft ? 'X' : ' ';
-		sprintf(tmp + 6, "%4ld) ", cache->msgno);
+		snprintf(tmp + 6, sizeof(tmp) - 6, "%4ld) ", cache->msgno);
 		mail_date(tmp+11, cache);
 		tmp[22] = ' ';
 		tmp[23] = '\0';
@@ -1625,13 +1625,13 @@ PHP_FUNCTION(imap_headerinfo)
 	add_property_string(return_value, "Deleted", cache->deleted ? "D" : " ", 1);
 	add_property_string(return_value, "Draft", cache->draft ? "X" : " ", 1);
 	
-	sprintf(dummy, "%4ld", cache->msgno);
+	snprintf(dummy, sizeof(dummy), "%4ld", cache->msgno);
 	add_property_string(return_value, "Msgno", dummy, 1);
 	
 	mail_date(dummy, cache);
 	add_property_string(return_value, "MailDate", dummy, 1);
 	
-	sprintf(dummy, "%ld", cache->rfc822_size); 
+	snprintf(dummy, sizeof(dummy), "%ld", cache->rfc822_size); 
 	add_property_string(return_value, "Size", dummy, 1);
 	
 	add_property_long(return_value, "udate", mail_longdate(cache));
@@ -2215,6 +2215,9 @@ PHP_FUNCTION(imap_utf8)
 	if (dest.data) {
 		free(dest.data);
 	}
+	if (src.data && src.data != dest.data) {
+		free(src.data);
+	}
 }
 /* }}} */
 
@@ -2953,7 +2956,7 @@ PHP_FUNCTION(imap_mail_compose)
 	BODY *bod=NULL, *topbod=NULL;
 	PART *mypart=NULL, *part;
 	PARAMETER *param, *disp_param = NULL, *custom_headers_param = NULL, *tmp_param = NULL;
-	char tmp[SENDBUFLEN + 1], *mystring=NULL, *t=NULL, *tempstring=NULL;
+	char *tmp=NULL, *mystring=NULL, *t=NULL, *tempstring=NULL;
 	int toppart = 0;
 
 	if (ZEND_NUM_ARGS() != 2 || zend_get_parameters_ex(2, &envelope, &body) == FAILURE) {
@@ -3255,6 +3258,9 @@ PHP_FUNCTION(imap_mail_compose)
 	}
 
 	rfc822_encode_body_7bit(env, topbod);
+
+	tmp = emalloc(SENDBUFLEN + 1);
+
 	rfc822_header(tmp, env, topbod);
 
 	/* add custom envelope headers */
@@ -3304,7 +3310,7 @@ PHP_FUNCTION(imap_mail_compose)
 		/* yucky default */
 			if (!cookie) {
 				cookie = "-";  
-			} else if (strlen(cookie) > (sizeof(tmp) - 2 - 2)) {  /* validate cookie length -- + CRLF */
+			} else if (strlen(cookie) > (SENDBUFLEN - 2 - 2 - 2)) {  /* validate cookie length -- + CRLF * 2 */
 				php_error_docref(NULL TSRMLS_CC, E_WARNING, "The boudary should be no longer then 4kb");
 				RETVAL_FALSE;
 				goto done;	
@@ -3312,18 +3318,14 @@ PHP_FUNCTION(imap_mail_compose)
 
 		/* for each part */
 			do {
-				t=tmp;
-			/* build cookie */
-				sprintf(t, "--%s%s", cookie, CRLF);
-
+				t = tmp;
+			
 			/* append mini-header */
+				*t = '\0';
 				rfc822_write_body_header(&t, &part->body);
 
-			/* write terminating blank line */
-				strcat(t, CRLF);
-
 			/* output cookie, mini-header, and contents */
-				spprintf(&tempstring, 0, "%s%s", mystring, tmp);
+				spprintf(&tempstring, 0, "%s--%s%s%s%s", mystring, cookie, CRLF, tmp, CRLF);
 				efree(mystring);
 				mystring=tempstring;
 
@@ -3339,9 +3341,9 @@ PHP_FUNCTION(imap_mail_compose)
 			efree(mystring);
 			mystring=tempstring;
 	} else if (bod) {
-			spprintf(&tempstring, 0, "%s%s%s", mystring, bod->contents.text.data, CRLF);
-			efree(mystring);
-			mystring=tempstring;
+		spprintf(&tempstring, 0, "%s%s%s", mystring, bod->contents.text.data, CRLF);
+		efree(mystring);
+		mystring=tempstring;
 	} else {
 		efree(mystring);
 		RETVAL_FALSE;
@@ -3350,6 +3352,9 @@ PHP_FUNCTION(imap_mail_compose)
 
 	RETVAL_STRING(tempstring, 0);
 done:
+	if (tmp) {
+		efree(tmp);
+	}
 	mail_free_body(&topbod);
 	mail_free_envelope(&env);
 }
@@ -3372,7 +3377,8 @@ int _php_imap_mail(char *to, char *subje
 	char *tsm_errmsg = NULL;
 	ADDRESS *addr;
 	char *bufferTo = NULL, *bufferCc = NULL, *bufferBcc = NULL, *bufferHeader = NULL;
-	int offset, bufferLen = 0;;
+	int offset, bufferLen = 0;
+	size_t bt_len;
 
 	if (headers) {
 		bufferLen += strlen(headers);
@@ -3394,7 +3400,9 @@ int _php_imap_mail(char *to, char *subje
 		strlcat(bufferHeader, to, bufferLen + 1);
 		strlcat(bufferHeader, "\r\n", bufferLen + 1);
 		tempMailTo = estrdup(to);
-		bufferTo = (char *)emalloc(strlen(to) + 1);
+		bt_len = strlen(to);
+		bufferTo = (char *)safe_emalloc(bt_len, 1, 1);
+		bt_len++;
 		offset = 0;
 		addr = NULL;
 		rfc822_parse_adrlist(&addr, tempMailTo, NULL);
@@ -3402,7 +3410,11 @@ int _php_imap_mail(char *to, char *subje
 			if (strcmp(addr->host, ERRHOST) == 0) {
 				PHP_IMAP_BAD_DEST;
 			} else {
-				offset += sprintf(bufferTo + offset, "%s@%s,", addr->mailbox, addr->host);
+				bufferTo = safe_erealloc(bufferTo, bt_len, 1, strlen(addr->mailbox));
+				bt_len += strlen(addr->mailbox);
+				bufferTo = safe_erealloc(bufferTo, bt_len, 1, strlen(addr->host));
+				bt_len += strlen(addr->host);
+				offset += snprintf(bufferTo + offset, bt_len - offset, "%s@%s,", addr->mailbox, addr->host);
 			}
 			addr = addr->next;
 		}
@@ -3417,7 +3429,9 @@ int _php_imap_mail(char *to, char *subje
 		strlcat(bufferHeader, cc, bufferLen + 1);
 		strlcat(bufferHeader, "\r\n", bufferLen + 1);
 		tempMailTo = estrdup(cc);
-		bufferCc = (char *)emalloc(strlen(cc) + 1);
+		bt_len = strlen(cc);
+		bufferCc = (char *)safe_emalloc(bt_len, 1, 1);
+		bt_len++;
 		offset = 0;
 		addr = NULL;
 		rfc822_parse_adrlist(&addr, tempMailTo, NULL);
@@ -3425,7 +3439,11 @@ int _php_imap_mail(char *to, char *subje
 			if (strcmp(addr->host, ERRHOST) == 0) {
 				PHP_IMAP_BAD_DEST;
 			} else {
-				offset += sprintf(bufferCc + offset, "%s@%s,", addr->mailbox, addr->host);
+				bufferCc = safe_erealloc(bufferCc, bt_len, 1, strlen(addr->mailbox));
+				bt_len += strlen(addr->mailbox);
+				bufferCc = safe_erealloc(bufferCc, bt_len, 1, strlen(addr->host));
+				bt_len += strlen(addr->host);
+				offset += snprintf(bufferCc + offset, bt_len - offset, "%s@%s,", addr->mailbox, addr->host);
 			}
 			addr = addr->next;
 		}
@@ -3437,7 +3455,9 @@ int _php_imap_mail(char *to, char *subje
 
 	if (bcc && *bcc) {
 		tempMailTo = estrdup(bcc);
-		bufferBcc = (char *)emalloc(strlen(bcc) + 1);
+		bt_len = strlen(bcc);
+		bufferBcc = (char *)safe_emalloc(bt_len, 1, 1);
+		bt_len++;
 		offset = 0;
 		addr = NULL;
 		rfc822_parse_adrlist(&addr, tempMailTo, NULL);
@@ -3445,7 +3465,11 @@ int _php_imap_mail(char *to, char *subje
 			if (strcmp(addr->host, ERRHOST) == 0) {
 				PHP_IMAP_BAD_DEST;
 			} else {
-				offset += sprintf(bufferBcc + offset, "%s@%s,", addr->mailbox, addr->host);
+				bufferBcc = safe_erealloc(bufferBcc, bt_len, 1, strlen(addr->mailbox));
+				bt_len += strlen(addr->mailbox);
+				bufferBcc = safe_erealloc(bufferBcc, bt_len, 1, strlen(addr->host));
+				bt_len += strlen(addr->host);
+				offset += snprintf(bufferBcc + offset, bt_len - offset, "%s@%s,", addr->mailbox, addr->host);
 			}
 			addr = addr->next;
 		}
Index: 5_2_1/ext/gd/libgd/gdft.c
===================================================================
--- 5_2_1.orig/ext/gd/libgd/gdft.c
+++ 5_2_1/ext/gd/libgd/gdft.c
@@ -688,8 +688,10 @@ static char * gdft_draw_bitmap (gdCache_
 				} else {
 					/* find antialised color */
 					tc_key.bgcolor = *pixel;
+					gdMutexLock(gdFontCacheMutex);
 					tc_elem = (tweencolor_t *) gdCacheGet(tc_cache, &tc_key);
 					*pixel = tc_elem->tweencolor;
+					gdMutexUnlock(gdFontCacheMutex);
 				}
 			}
 		}
@@ -716,9 +718,11 @@ static FT_Library library;
 void gdFontCacheShutdown()
 {
 	if (fontCache) {
-		gdMutexShutdown(gdFontCacheMutex);
+		gdMutexLock(gdFontCacheMutex);
 		gdCacheDelete(fontCache);
+		gdMutexUnlock(gdFontCacheMutex);
 		fontCache = NULL;
+		gdMutexShutdown(gdFontCacheMutex);
 		FT_Done_FreeType(library);
 	}
 }
Index: 5_2_1/ext/soap/php_encoding.c
===================================================================
--- 5_2_1.orig/ext/soap/php_encoding.c
+++ 5_2_1/ext/soap/php_encoding.c
@@ -937,7 +937,7 @@ static xmlNodePtr to_xml_long(encodeType
 	if (Z_TYPE_P(data) == IS_DOUBLE) {
 		char s[256];
 
-		sprintf(s, "%0.0F",floor(Z_DVAL_P(data)));
+		snprintf(s, sizeof(s), "%0.0F",floor(Z_DVAL_P(data)));
 		xmlNodeSetContent(ret, BAD_CAST(s));
 	} else {
 		zval tmp = *data;
@@ -1574,8 +1574,10 @@ static int model_to_xml_object(xmlNodePt
 
 			zend_hash_internal_pointer_reset_ex(model->u.content, &pos);
 			while (zend_hash_get_current_data_ex(model->u.content, (void**)&tmp, &pos) == SUCCESS) {
-				if (!model_to_xml_object(node, *tmp, object, style, model->min_occurs > 0 TSRMLS_CC)) {
-					return 0;
+				if (!model_to_xml_object(node, *tmp, object, style, (*tmp)->min_occurs > 0 TSRMLS_CC)) {
+					if ((*tmp)->min_occurs > 0) {
+						return 0;
+					}
 				}
 				zend_hash_move_forward_ex(model->u.content, &pos);
 			}
@@ -2676,12 +2678,12 @@ static xmlNodePtr to_xml_datetime_ex(enc
 
 		/* Time zone support */
 #ifdef HAVE_TM_GMTOFF
-		sprintf(tzbuf, "%c%02d:%02d", (ta->tm_gmtoff < 0) ? '-' : '+', abs(ta->tm_gmtoff / 3600), abs( (ta->tm_gmtoff % 3600) / 60 ));
+		snprintf(tzbuf, sizeof(tzbuf), "%c%02d:%02d", (ta->tm_gmtoff < 0) ? '-' : '+', abs(ta->tm_gmtoff / 3600), abs( (ta->tm_gmtoff % 3600) / 60 ));
 #else
 # ifdef __CYGWIN__
-		sprintf(tzbuf, "%c%02d:%02d", ((ta->tm_isdst ? _timezone - 3600:_timezone)>0)?'-':'+', abs((ta->tm_isdst ? _timezone - 3600 : _timezone) / 3600), abs(((ta->tm_isdst ? _timezone - 3600 : _timezone) % 3600) / 60));
+		snprintf(tzbuf, sizeof(tzbuf), "%c%02d:%02d", ((ta->tm_isdst ? _timezone - 3600:_timezone)>0)?'-':'+', abs((ta->tm_isdst ? _timezone - 3600 : _timezone) / 3600), abs(((ta->tm_isdst ? _timezone - 3600 : _timezone) % 3600) / 60));
 # else
-		sprintf(tzbuf, "%c%02d:%02d", ((ta->tm_isdst ? timezone - 3600:timezone)>0)?'-':'+', abs((ta->tm_isdst ? timezone - 3600 : timezone) / 3600), abs(((ta->tm_isdst ? timezone - 3600 : timezone) % 3600) / 60));
+		snprintf(tzbuf, sizeof(tzbuf), "%c%02d:%02d", ((ta->tm_isdst ? timezone - 3600:timezone)>0)?'-':'+', abs((ta->tm_isdst ? timezone - 3600 : timezone) / 3600), abs(((ta->tm_isdst ? timezone - 3600 : timezone) % 3600) / 60));
 # endif
 #endif
 		if (strcmp(tzbuf,"+00:00") == 0) {
Index: 5_2_1/ext/soap/php_http.c
===================================================================
--- 5_2_1.orig/ext/soap/php_http.c
+++ 5_2_1/ext/soap/php_http.c
@@ -472,7 +472,7 @@ try_again:
 					unsigned int ctx;
 
 					PHP_MD5Init(&md5ctx);
-					sprintf(cnonce, "%d", php_rand_r(&ctx));
+					snprintf(cnonce, sizeof(cnonce), "%d", php_rand_r(&ctx));
 					PHP_MD5Update(&md5ctx, (unsigned char*)cnonce, strlen(cnonce));
 					PHP_MD5Final(hash, &md5ctx);
 					make_digest(cnonce, hash);
@@ -480,7 +480,7 @@ try_again:
 					if (zend_hash_find(Z_ARRVAL_PP(digest), "nc", sizeof("nc"), (void **)&tmp) == SUCCESS &&
 					    Z_TYPE_PP(tmp) == IS_LONG) {
 						Z_LVAL_PP(tmp)++;
-						sprintf(nc, "%08ld", Z_LVAL_PP(tmp));
+						snprintf(nc, sizeof(nc), "%08ld", Z_LVAL_PP(tmp));
 					} else {
 						add_assoc_long(*digest, "nc", 1);
 						strcpy(nc, "00000001");
@@ -910,19 +910,20 @@ try_again:
 				efree(http_body);
 				efree(loc);
 				if (new_url->scheme == NULL && new_url->path != NULL) {
-					new_url->scheme = estrdup(phpurl->scheme);
-					new_url->host = estrdup(phpurl->host);
+					new_url->scheme = NULL;
+					new_url->host = phpurl->host ? estrdup(phpurl->host) : NULL;
 					new_url->port = phpurl->port;
 					if (new_url->path && new_url->path[0] != '/') {
-						char *t = phpurl->path?phpurl->path:"/";
+						char *t = phpurl->path;
 						char *p = strrchr(t, '/');
-						char *s = emalloc((p - t) + strlen(new_url->path) + 2);
-
-						strncpy(s, t, (p - t) + 1);
-						s[(p - t) + 1] = 0;
-						strcat(s, new_url->path);
-						efree(new_url->path);
-						new_url->path = s;
+						if (p) {
+							char *s = emalloc((p - t) + strlen(new_url->path) + 2);
+							strncpy(s, t, (p - t) + 1);
+							s[(p - t) + 1] = 0;
+							strcat(s, new_url->path);
+							efree(new_url->path);
+							new_url->path = s;
+						}
 					}
 				}
 				phpurl = new_url;
Index: 5_2_1/ext/soap/php_schema.c
===================================================================
--- 5_2_1.orig/ext/soap/php_schema.c
+++ 5_2_1/ext/soap/php_schema.c
@@ -681,7 +681,9 @@ static int schema_restriction_simpleCont
 				cur_type->restrictions->enumeration = emalloc(sizeof(HashTable));
 				zend_hash_init(cur_type->restrictions->enumeration, 0, NULL, delete_restriction_var_char, 0);
 			}
-			zend_hash_add(cur_type->restrictions->enumeration, enumval->value, strlen(enumval->value)+1, &enumval, sizeof(sdlRestrictionCharPtr), NULL);
+			if (zend_hash_add(cur_type->restrictions->enumeration, enumval->value, strlen(enumval->value)+1, &enumval, sizeof(sdlRestrictionCharPtr), NULL) == FAILURE) {
+				delete_restriction_var_char(&enumval);
+			}
 		} else {
 			break;
 		}
@@ -2313,6 +2315,7 @@ void delete_model_persistent(void *handl
 void delete_type(void *data)
 {
 	sdlTypePtr type = *((sdlTypePtr*)data);
+
 	if (type->name) {
 		efree(type->name);
 	}
Index: 5_2_1/ext/soap/php_sdl.c
===================================================================
--- 5_2_1.orig/ext/soap/php_sdl.c
+++ 5_2_1/ext/soap/php_sdl.c
@@ -1250,7 +1250,7 @@ static void sdl_deserialize_type(sdlType
 
 	WSDL_CACHE_GET_INT(i, in);
 	if (i > 0) {
-		elements = emalloc((i+1) * sizeof(sdlTypePtr));
+		elements = safe_emalloc((i+1), sizeof(sdlTypePtr), 0);
 		elements[0] = NULL;
 		type->elements = emalloc(sizeof(HashTable));
 		zend_hash_init(type->elements, i, NULL, delete_type, 0);
@@ -1479,7 +1479,7 @@ static sdlPtr get_sdl_from_cache(const c
 	WSDL_CACHE_GET_INT(num_encoders, &in);
 
 	i = num_groups+num_types+num_elements;
-	types = emalloc((i+1)*sizeof(sdlTypePtr));
+	types = safe_emalloc((i+1), sizeof(sdlTypePtr), 0);
 	types[0] = NULL;
 	while (i > 0) {
 		types[i] = emalloc(sizeof(sdlType));
@@ -1492,7 +1492,7 @@ static sdlPtr get_sdl_from_cache(const c
 	while (enc->details.type != END_KNOWN_TYPES) {
 		i++; enc++;
 	}
-	encoders = emalloc((i+1)*sizeof(encodePtr));
+	encoders = safe_emalloc((i+1), sizeof(encodePtr), 0);
 	i = num_encoders;
 	encoders[0] = NULL;
 	while (i > 0) {
@@ -1550,7 +1550,7 @@ static sdlPtr get_sdl_from_cache(const c
 
 	/* deserialize bindings */
 	WSDL_CACHE_GET_INT(num_bindings, &in);
-	bindings = emalloc(num_bindings*sizeof(sdlBindingPtr));
+	bindings = safe_emalloc(num_bindings, sizeof(sdlBindingPtr), 0);
 	if (num_bindings > 0) {
 		sdl->bindings = emalloc(sizeof(HashTable));
 		zend_hash_init(sdl->bindings, num_bindings, NULL, delete_binding, 0);
@@ -1576,7 +1576,7 @@ static sdlPtr get_sdl_from_cache(const c
 	WSDL_CACHE_GET_INT(num_func, &in);
 	zend_hash_init(&sdl->functions, num_func, NULL, delete_function, 0);
 	if (num_func > 0) {
-		functions = emalloc(num_func*sizeof(sdlFunctionPtr));
+		functions = safe_emalloc(num_func, sizeof(sdlFunctionPtr), 0);
 		for (i = 0; i < num_func; i++) {
 			int binding_num, num_faults;
 			sdlFunctionPtr func = emalloc(sizeof(sdlFunction));
Index: 5_2_1/ext/soap/soap.c
===================================================================
--- 5_2_1.orig/ext/soap/soap.c
+++ 5_2_1/ext/soap/soap.c
@@ -444,8 +444,7 @@ static void php_soap_prepare_globals()
 		if (defaultEncoding[i].details.type_str) {
 			if (defaultEncoding[i].details.ns != NULL) {
 				char *ns_type;
-				ns_type = emalloc(strlen(defaultEncoding[i].details.ns) + strlen(defaultEncoding[i].details.type_str) + 2);
-				sprintf(ns_type, "%s:%s", defaultEncoding[i].details.ns, defaultEncoding[i].details.type_str);
+				spprintf(&ns_type, 0, "%s:%s", defaultEncoding[i].details.ns, defaultEncoding[i].details.type_str);
 				zend_hash_add(&defEnc, ns_type, strlen(ns_type) + 1, &enc, sizeof(encodePtr), NULL);
 				efree(ns_type);
 			} else {
Index: 5_2_1/ext/xmlrpc/libxmlrpc/xml_to_soap.c
===================================================================
--- 5_2_1.orig/ext/xmlrpc/libxmlrpc/xml_to_soap.c
+++ 5_2_1/ext/xmlrpc/libxmlrpc/xml_to_soap.c
@@ -75,7 +75,7 @@ static xml_element_attr* new_attr(const 
 }
 
 struct array_info {
-	char          kids_type[30];
+	char          kids_type[128];
 	unsigned long size;
 	/* ... ? */
 };
Index: 5_2_1/ext/exif/exif.c
===================================================================
--- 5_2_1.orig/ext/exif/exif.c
+++ 5_2_1/ext/exif/exif.c
@@ -84,6 +84,9 @@ typedef unsigned char uchar;
 #ifndef safe_emalloc
 # define safe_emalloc(a,b,c) emalloc((a)*(b)+(c))
 #endif
+#ifndef safe_erealloc
+# define safe_erealloc(p,a,b,c) erealloc(p, (a)*(b)+(c))
+#endif
 
 #ifndef TRUE
 #	define TRUE 1
@@ -999,27 +1002,24 @@ static char * exif_get_tagname(int tag_n
 				break;
 			}
 			if (ret && len)  {
-				strncpy(ret, tag_table[i].Desc, abs(len));
-				if (len<0) {
-					len = -len;
-					ret[len-1]='\0';
-					for(i=strlen(ret);i<len;i++)ret[i]=' ';
+				strlcpy(ret, tag_table[i].Desc, abs(len));
+				if (len < 0) {
+					memset(ret + strlen(ret), ' ', -len - strlen(ret) - 1);
+					ret[-len - 1] = '\0';
 				}
-				ret[len-1]='\0';
 				return ret;
 			}
 			return tag_table[i].Desc;
 		}
 	}
+
 	if (ret && len) {
 		snprintf(tmp, sizeof(tmp), "UndefinedTag:0x%04X", tag_num);
-		strncpy(ret, tmp, abs(len));
-		if (len<0) {
-			len = -len;
-			ret[len-1]='\0';
-			for(i=strlen(ret);i<len;i++)ret[i]=' ';
+		strlcpy(ret, tmp, abs(len));
+		if (len < 0) {
+			memset(ret + strlen(ret), ' ', -len - strlen(ret) - 1);
+			ret[-len - 1] = '\0';
 		}
-		ret[len-1]='\0';
 		return ret;
 	}
 	return "";
@@ -1035,22 +1035,22 @@ static unsigned char* exif_char_dump(uns
 	static unsigned char tmp[20];
 	int c, i, p=0, n = 5+31;
 
-	p += sprintf(buf+p, "\nDump Len: %08X (%d)", len, len);
+	p += snprintf(buf+p, sizeof(buf)-p, "\nDump Len: %08X (%d)", len, len);
 	if (len) {
 		for(i=0; i<len+15 && p+n<=sizeof(buf); i++) {
 			if (i%16==0) {
-				p += sprintf(buf+p, "\n%08X: ", i+offset);
+				p += snprintf(buf+p, sizeof(buf)-p, "\n%08X: ", i+offset);
 			}
 			if (i<len) {
 				c = *addr++;
-				p += sprintf(buf+p, "%02X ", c);
+				p += snprintf(buf+p, sizeof(buf)-p, "%02X ", c);
 				tmp[i%16] = c>=32 ? c : '.';
 				tmp[(i%16)+1] = '\0';
 			} else {
-				p += sprintf(buf+p, "   ");
+				p += snprintf(buf+p, sizeof(buf)-p, "   ");
 			}
 			if (i%16==15) {
-				p += sprintf(buf+p, "    %s", tmp);
+				p += snprintf(buf+p, sizeof(buf)-p, "    %s", tmp);
 				if (i>=len) {
 					break;
 				}
@@ -1181,44 +1181,44 @@ char * exif_dump_data(int *dump_free, in
 			case TAG_FMT_UNDEFINED:
 			case TAG_FMT_STRING:
 			case TAG_FMT_SBYTE:
-				dump = erealloc(dump, len + 4);
-				sprintf(dump + len, "0x%02X", *value_ptr);
+				dump = erealloc(dump, len + 4 + 1);
+				snprintf(dump + len, 4 + 1, "0x%02X", *value_ptr);
 				len += 4;
 				value_ptr++;
 				break;
 			case TAG_FMT_USHORT:
 			case TAG_FMT_SSHORT:
-				dump = erealloc(dump, len + 6);
-				sprintf(dump + len, "0x%04X", php_ifd_get16s(value_ptr, motorola_intel));
+				dump = erealloc(dump, len + 6 + 1);
+				snprintf(dump + len, 6 + 1, "0x%04X", php_ifd_get16s(value_ptr, motorola_intel));
 				len += 6;
 				value_ptr += 2;
 				break;
 			case TAG_FMT_ULONG:
 			case TAG_FMT_SLONG:
-				dump = erealloc(dump, len + 6);
-				sprintf(dump + len, "0x%04X", php_ifd_get32s(value_ptr, motorola_intel));
+				dump = erealloc(dump, len + 6 + 1);
+				snprintf(dump + len, 6 + 1, "0x%04X", php_ifd_get32s(value_ptr, motorola_intel));
 				len += 6;
 				value_ptr += 4;
 				break;
 			case TAG_FMT_URATIONAL:
 			case TAG_FMT_SRATIONAL:
-				dump = erealloc(dump, len + 13);
-				sprintf(dump + len, "0x%04X/0x%04X", php_ifd_get32s(value_ptr, motorola_intel), php_ifd_get32s(value_ptr+4, motorola_intel));
+				dump = erealloc(dump, len + 13 + 1);
+				snprintf(dump + len, 13 + 1, "0x%04X/0x%04X", php_ifd_get32s(value_ptr, motorola_intel), php_ifd_get32s(value_ptr+4, motorola_intel));
 				len += 13;
 				value_ptr += 8;
 				break;
 		}
 		if (components > 0) {
-			dump = erealloc(dump, len + 2);
-			sprintf(dump + len, ", ");
+			dump = erealloc(dump, len + 2 + 1);
+			snprintf(dump + len, 2 + 1, ", ");
 			len += 2;			
 			components--;
 		} else{
 			break;
 		}
 	}
-	dump = erealloc(dump, len + 2);
-	sprintf(dump + len, "}");
+	dump = erealloc(dump, len + 1 + 1);
+	snprintf(dump + len, 1 + 1, "}");
 	return dump;
 }
 /* }}} */
@@ -1448,18 +1448,18 @@ static tag_table_type exif_get_tag_table
 */
 static char *exif_get_sectionlist(int sectionlist TSRMLS_DC)
 {
-	int i, len=0;
+	int i, len, ml = 0;
 	char *sections;
 
 	for(i=0; i<SECTION_COUNT; i++) {
-		len += strlen(exif_get_sectionname(i))+2;
+		ml += strlen(exif_get_sectionname(i))+2;
 	}
-	sections = safe_emalloc(len, 1, 1);
+	sections = safe_emalloc(ml, 1, 1);
 	sections[0] = '\0';
 	len = 0;
 	for(i=0; i<SECTION_COUNT; i++) {
 		if (sectionlist&(1<<i)) {
-			sprintf(sections+len, "%s, ", exif_get_sectionname(i));
+			snprintf(sections+len, ml-len, "%s, ", exif_get_sectionname(i));
 			len = strlen(sections);
 		}
 	}
@@ -1597,7 +1597,7 @@ static int exif_file_sections_add(image_
 	file_section    *tmp;
 	int             count = ImageInfo->file.count;
 
-	tmp = erealloc(ImageInfo->file.list, (count+1)*sizeof(file_section));
+	tmp = safe_erealloc(ImageInfo->file.list, (count+1), sizeof(file_section), 0);
 	ImageInfo->file.list = tmp;
 	ImageInfo->file.list[count].type = 0xFFFF;
 	ImageInfo->file.list[count].data = NULL;
@@ -1629,7 +1629,7 @@ static int exif_file_sections_realloc(im
 		EXIF_ERRLOG_FSREALLOC(ImageInfo)
 		return -1;
 	}
-	tmp = erealloc(ImageInfo->file.list[section_index].data, size);
+	tmp = safe_erealloc(ImageInfo->file.list[section_index].data, 1, size, 0);
 	ImageInfo->file.list[section_index].data = tmp;
 	ImageInfo->file.list[section_index].size = size;
 	return 0;
@@ -1669,7 +1669,7 @@ static void exif_iif_add_value(image_inf
 		return;
 	}
 
-	list = erealloc(image_info->info_list[section_index].list, (image_info->info_list[section_index].count+1)*sizeof(image_info_data));
+	list = safe_erealloc(image_info->info_list[section_index].list, (image_info->info_list[section_index].count+1), sizeof(image_info_data), 0);
 	image_info->info_list[section_index].list = list;
 
 	info_data  = &image_info->info_list[section_index].list[image_info->info_list[section_index].count];
@@ -1807,7 +1807,7 @@ static void exif_iif_add_int(image_info_
 	image_info_data  *info_data;
 	image_info_data  *list;
 
-	list = erealloc(image_info->info_list[section_index].list, (image_info->info_list[section_index].count+1)*sizeof(image_info_data));
+	list = safe_erealloc(image_info->info_list[section_index].list, (image_info->info_list[section_index].count+1), sizeof(image_info_data), 0);
 	image_info->info_list[section_index].list = list;
 
 	info_data  = &image_info->info_list[section_index].list[image_info->info_list[section_index].count];
@@ -1830,7 +1830,7 @@ static void exif_iif_add_str(image_info_
 	image_info_data  *list;
 
 	if (value) {
-		list = erealloc(image_info->info_list[section_index].list, (image_info->info_list[section_index].count+1)*sizeof(image_info_data));
+		list = safe_erealloc(image_info->info_list[section_index].list, (image_info->info_list[section_index].count+1), sizeof(image_info_data), 0);
 		image_info->info_list[section_index].list = list;
 		info_data  = &image_info->info_list[section_index].list[image_info->info_list[section_index].count];
 		info_data->tag    = TAG_NONE;
@@ -1875,7 +1875,7 @@ static void exif_iif_add_buffer(image_in
 	image_info_data  *list;
 
 	if (value) {
-		list = erealloc(image_info->info_list[section_index].list, (image_info->info_list[section_index].count+1)*sizeof(image_info_data));
+		list = safe_erealloc(image_info->info_list[section_index].list, (image_info->info_list[section_index].count+1), sizeof(image_info_data), 0);
 		image_info->info_list[section_index].list = list;
 		info_data  = &image_info->info_list[section_index].list[image_info->info_list[section_index].count];
 		info_data->tag    = TAG_NONE;
@@ -2489,7 +2489,7 @@ static void exif_thumbnail_build(image_i
 				}
 			}
 			new_move = new_size;
-			new_data = erealloc(ImageInfo->Thumbnail.data, ImageInfo->Thumbnail.size+new_size);
+			new_data = safe_erealloc(ImageInfo->Thumbnail.data, 1, ImageInfo->Thumbnail.size, new_size);
 			ImageInfo->Thumbnail.data = new_data;
 			memmove(ImageInfo->Thumbnail.data + new_move, ImageInfo->Thumbnail.data, ImageInfo->Thumbnail.size);
 			ImageInfo->Thumbnail.size += new_size;
@@ -2985,7 +2985,7 @@ static int exif_process_IFD_TAG(image_in
 			case TAG_XP_AUTHOR:
 			case TAG_XP_KEYWORDS:
 			case TAG_XP_SUBJECT:
-				tmp_xp = (xp_field_type*)erealloc(ImageInfo->xp_fields.list, sizeof(xp_field_type)*(ImageInfo->xp_fields.count+1));
+				tmp_xp = (xp_field_type*)safe_erealloc(ImageInfo->xp_fields.list, (ImageInfo->xp_fields.count+1), sizeof(xp_field_type), 0);
 				ImageInfo->sections_found |= FOUND_WINXP;
 				ImageInfo->xp_fields.list = tmp_xp;
 				ImageInfo->xp_fields.count++;
@@ -3912,8 +3912,7 @@ PHP_FUNCTION(exif_read_data)
 
 	if(ac >= 2) {
 		convert_to_string_ex(p_sections_needed);
-		sections_str = safe_emalloc(strlen(Z_STRVAL_PP(p_sections_needed)), 1, 3);
-		sprintf(sections_str, ",%s,", Z_STRVAL_PP(p_sections_needed));
+		spprintf(&sections_str, 0, ",%s,", Z_STRVAL_PP(p_sections_needed));
 		/* sections_str DOES start with , and SPACES are NOT allowed in names */
 		s = sections_str;
 		while(*++s) {
Index: 5_2_1/ext/mbstring/mb_gpc.c
===================================================================
--- 5_2_1.orig/ext/mbstring/mb_gpc.c
+++ 5_2_1/ext/mbstring/mb_gpc.c
@@ -208,9 +208,8 @@ enum mbfl_no_encoding _php_mb_encoding_h
 	/* register_globals stuff
 	 * XXX: this feature is going to be deprecated? */
 
-	if (info->force_register_globals) {
-		prev_rg_state = PG(register_globals);
-		PG(register_globals) = 1;
+	if (info->force_register_globals && !(prev_rg_state = PG(register_globals))) {
+		zend_alter_ini_entry("register_globals", sizeof("register_globals"), "1", sizeof("1")-1, PHP_INI_PERDIR, PHP_INI_STAGE_RUNTIME);
 	}
 
 	if (!res || *res == '\0') {
@@ -343,8 +342,8 @@ enum mbfl_no_encoding _php_mb_encoding_h
 
 out:
 	/* register_global stuff */
-	if (info->force_register_globals) {
-		PG(register_globals) = prev_rg_state;
+	if (info->force_register_globals && !prev_rg_state) {
+		zend_alter_ini_entry("register_globals", sizeof("register_globals"), "0", sizeof("0")-1, PHP_INI_PERDIR, PHP_INI_STAGE_RUNTIME);
 	}
 
 	if (convd != NULL) {
Index: 5_2_1/ext/dom/node.c
===================================================================
--- 5_2_1.orig/ext/dom/node.c
+++ 5_2_1/ext/dom/node.c
@@ -1012,7 +1012,7 @@ PHP_FUNCTION(dom_node_insert_before)
 			new_child = xmlAddPrevSibling(refp, child);
 		}
 	} else {
-		if (child->parent == parentp){
+		if (child->parent != NULL){
 			xmlUnlinkNode(child);
 		}
 		if (child->type == XML_TEXT_NODE && parentp->last != NULL && parentp->last->type == XML_TEXT_NODE) {
Index: 5_2_1/Zend/zend_alloc.c
===================================================================
--- 5_2_1.orig/Zend/zend_alloc.c
+++ 5_2_1/Zend/zend_alloc.c
@@ -1947,6 +1947,31 @@ ZEND_API void *_safe_malloc(size_t nmemb
 	return 0;
 }
 
+ZEND_API void *_safe_erealloc(void *ptr, size_t nmemb, size_t size, size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)
+{
+
+	if (nmemb < LONG_MAX
+			&& size < LONG_MAX
+			&& offset < LONG_MAX
+			&& nmemb >= 0
+			&& size >= 0
+			&& offset >= 0) {
+		long lval;
+		double dval;
+		int use_dval;
+
+		ZEND_SIGNED_MULTIPLY_LONG(nmemb, size, lval, dval, use_dval);
+
+		if (!use_dval
+				&& lval < (long) (LONG_MAX - offset)) {
+			return erealloc_rel(ptr, lval + offset);
+		}
+	}
+
+	zend_error(E_ERROR, "Possible integer overflow in memory allocation (%zd * %zd + %zd)", nmemb, size, offset);
+	return 0;
+}
+
 ZEND_API void *_ecalloc(size_t nmemb, size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)
 {
 	void *p;
Index: 5_2_1/Zend/zend_alloc.h
===================================================================
--- 5_2_1.orig/Zend/zend_alloc.h
+++ 5_2_1/Zend/zend_alloc.h
@@ -46,6 +46,7 @@ ZEND_API void *_safe_malloc(size_t nmemb
 ZEND_API void _efree(void *ptr ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);
 ZEND_API void *_ecalloc(size_t nmemb, size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC) ZEND_ATTRIBUTE_MALLOC;
 ZEND_API void *_erealloc(void *ptr, size_t size, int allow_failure ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);
+ZEND_API void *_safe_erealloc(void *ptr, size_t nmemb, size_t size, size_t offset ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);
 ZEND_API char *_estrdup(const char *s ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC) ZEND_ATTRIBUTE_MALLOC;
 ZEND_API char *_estrndup(const char *s, unsigned int length ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC) ZEND_ATTRIBUTE_MALLOC;
 ZEND_API size_t _zend_mem_block_size(void *ptr TSRMLS_DC ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);
@@ -56,6 +57,7 @@ ZEND_API size_t _zend_mem_block_size(voi
 #define efree(ptr)							_efree((ptr) ZEND_FILE_LINE_CC ZEND_FILE_LINE_EMPTY_CC)
 #define ecalloc(nmemb, size)				_ecalloc((nmemb), (size) ZEND_FILE_LINE_CC ZEND_FILE_LINE_EMPTY_CC)
 #define erealloc(ptr, size)					_erealloc((ptr), (size), 0 ZEND_FILE_LINE_CC ZEND_FILE_LINE_EMPTY_CC)
+#define safe_erealloc(ptr, nmemb, size, offset) _safe_erealloc((ptr), (nmemb), (size), (offset) ZEND_FILE_LINE_CC ZEND_FILE_LINE_EMPTY_CC)
 #define erealloc_recoverable(ptr, size)		_erealloc((ptr), (size), 1 ZEND_FILE_LINE_CC ZEND_FILE_LINE_EMPTY_CC)
 #define estrdup(s)							_estrdup((s) ZEND_FILE_LINE_CC ZEND_FILE_LINE_EMPTY_CC)
 #define estrndup(s, length)					_estrndup((s), (length) ZEND_FILE_LINE_CC ZEND_FILE_LINE_EMPTY_CC)
@@ -68,6 +70,7 @@ ZEND_API size_t _zend_mem_block_size(voi
 #define ecalloc_rel(nmemb, size)				_ecalloc((nmemb), (size) ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_CC)
 #define erealloc_rel(ptr, size)					_erealloc((ptr), (size), 0 ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_CC)
 #define erealloc_recoverable_rel(ptr, size)		_erealloc((ptr), (size), 1 ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_CC)
+#define safe_erealloc_rel(ptr, nmemb, size, offset) _safe_erealloc((ptr), (nmemb), (size), (offset) ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_CC)
 #define estrdup_rel(s)							_estrdup((s) ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_CC)
 #define estrndup_rel(s, length)					_estrndup((s), (length) ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_CC)
 #define zend_mem_block_size_rel(ptr)			_zend_mem_block_size((ptr) TSRMLS_CC ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_CC)
@@ -78,6 +81,7 @@ ZEND_API size_t _zend_mem_block_size(voi
 #define pefree(ptr, persistent)  ((persistent)?free(ptr):efree(ptr))
 #define pecalloc(nmemb, size, persistent) ((persistent)?calloc((nmemb), (size)):ecalloc((nmemb), (size)))
 #define perealloc(ptr, size, persistent) ((persistent)?realloc((ptr), (size)):erealloc((ptr), (size)))
+#define safe_perealloc(ptr, nmemb, size, offset, persistent)    ((persistent)?_safe_realloc((ptr), (nmemb), (size), (offset)):safe_erealloc((ptr), (nmemb), (size), (offset)))
 #define perealloc_recoverable(ptr, size, persistent) ((persistent)?realloc((ptr), (size)):erealloc_recoverable((ptr), (size)))
 #define pestrdup(s, persistent) ((persistent)?strdup(s):estrdup(s))
 
Index: 5_2_1/ext/standard/array.c
===================================================================
--- 5_2_1.orig/ext/standard/array.c
+++ 5_2_1/ext/standard/array.c
@@ -703,40 +703,40 @@ static int array_user_key_compare(const 
 {
 	Bucket *f;
 	Bucket *s;
-	zval key1, key2;
+	zval *key1, *key2;
 	zval *args[2];
 	zval retval;
 	int status;
 
-	args[0] = &key1;
-	args[1] = &key2;
-	INIT_PZVAL(&key1);
-	INIT_PZVAL(&key2);
+	ALLOC_INIT_ZVAL(key1);
+	ALLOC_INIT_ZVAL(key2);
+	args[0] = key1;
+	args[1] = key2;
 	
 	f = *((Bucket **) a);
 	s = *((Bucket **) b);
 
 	if (f->nKeyLength) {
-		Z_STRVAL(key1) = estrndup(f->arKey, f->nKeyLength-1);
-		Z_STRLEN(key1) = f->nKeyLength-1;
-		Z_TYPE(key1) = IS_STRING;
+		Z_STRVAL_P(key1) = estrndup(f->arKey, f->nKeyLength-1);
+		Z_STRLEN_P(key1) = f->nKeyLength-1;
+		Z_TYPE_P(key1) = IS_STRING;
 	} else {
-		Z_LVAL(key1) = f->h;
-		Z_TYPE(key1) = IS_LONG;
+		Z_LVAL_P(key1) = f->h;
+		Z_TYPE_P(key1) = IS_LONG;
 	}
 	if (s->nKeyLength) {
-		Z_STRVAL(key2) = estrndup(s->arKey, s->nKeyLength-1);
-		Z_STRLEN(key2) = s->nKeyLength-1;
-		Z_TYPE(key2) = IS_STRING;
+		Z_STRVAL_P(key2) = estrndup(s->arKey, s->nKeyLength-1);
+		Z_STRLEN_P(key2) = s->nKeyLength-1;
+		Z_TYPE_P(key2) = IS_STRING;
 	} else {
-		Z_LVAL(key2) = s->h;
-		Z_TYPE(key2) = IS_LONG;
+		Z_LVAL_P(key2) = s->h;
+		Z_TYPE_P(key2) = IS_LONG;
 	}
 
 	status = call_user_function(EG(function_table), NULL, *BG(user_compare_func_name), &retval, 2, args TSRMLS_CC);
 	
-	zval_dtor(&key1);
-	zval_dtor(&key2);
+	zval_ptr_dtor(&key1);
+	zval_ptr_dtor(&key2);
 	
 	if (status == SUCCESS) {
 		convert_to_long(&retval);
Index: 5_2_1/ext/zip/php_zip.c
===================================================================
--- 5_2_1.orig/ext/zip/php_zip.c
+++ 5_2_1/ext/zip/php_zip.c
@@ -49,11 +49,6 @@ static int le_zip_entry;
 #define le_zip_entry_name "Zip Entry"
 /* }}} */
 
-/* {{{ SAFEMODE_CHECKFILE(filename) */
-#define SAFEMODE_CHECKFILE(filename) \
-	(PG(safe_mode) && (!php_checkuid(filename, NULL, CHECKUID_CHECK_FILE_AND_DIR))) || php_check_open_basedir(filename TSRMLS_CC)
-/* }}} */
-
 /* {{{ PHP_ZIP_STAT_INDEX(za, index, flags, sb) */
 #define PHP_ZIP_STAT_INDEX(za, index, flags, sb) \
 	if (zip_stat_index(za, index, flags, &sb) != 0) { \
@@ -127,7 +122,7 @@ static int php_zip_extract_file(struct z
 
 		php_basename(file, file_len, NULL, 0, &file_basename, (unsigned int *)&file_basename_len TSRMLS_CC);
 
-		if (SAFEMODE_CHECKFILE(file_dirname_fullpath)) {
+		if (OPENBASEDIR_CHECKPATH(file_dirname_fullpath)) {
 			efree(file_dirname_fullpath);
 			efree(file_basename);
 			return 0;
@@ -164,7 +159,8 @@ static int php_zip_extract_file(struct z
 	 * is required, does a file can have a different
 	 * safemode status as its parent folder?
 	 */
-	if (SAFEMODE_CHECKFILE(fullpath)) {
+	if (OPENBASEDIR_CHECKPATH(fullpath)) {
+		efree(fullpath);
 		efree(file_dirname_fullpath);
 		efree(file_basename);
 		return 0;
@@ -621,13 +617,24 @@ static PHP_FUNCTION(zip_open)
 {
 	char     *filename;
 	int       filename_len;
+	char resolved_path[MAXPATHLEN + 1];
 	zip_rsrc *rsrc_int;
 	int err = 0;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &filename, &filename_len) == FAILURE) {
 		return;
 	}
-	if (SAFEMODE_CHECKFILE(filename)) {
+
+	if (filename_len == 0) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Empty string as source");
+		RETURN_FALSE;
+	}
+
+	if (OPENBASEDIR_CHECKPATH(filename)) {
+		RETURN_FALSE;
+	}
+
+	if(!expand_filepath(filename, resolved_path TSRMLS_CC)) {
 		RETURN_FALSE;
 	}
 
@@ -911,6 +918,10 @@ static ZIPARCHIVE_METHOD(open)
 		RETURN_FALSE;
 	}
 
+	if (OPENBASEDIR_CHECKPATH(filename)) {
+		RETURN_FALSE;
+	}
+
 	if (!expand_filepath(filename, resolved_path TSRMLS_CC)) {
 		RETURN_FALSE;
 	}
@@ -1032,7 +1043,7 @@ static ZIPARCHIVE_METHOD(addFile)
 		entry_name_len = filename_len;
 	}
 
-	if (SAFEMODE_CHECKFILE(filename)) {
+	if (OPENBASEDIR_CHECKPATH(filename)) {
 		RETURN_FALSE;
 	}
 
Index: 5_2_1/ext/zip/php_zip.h
===================================================================
--- 5_2_1.orig/ext/zip/php_zip.h
+++ 5_2_1/ext/zip/php_zip.h
@@ -30,6 +30,16 @@ extern zend_module_entry zip_module_entr
 
 #include "lib/zip.h"
 
+/* {{{ OPENBASEDIR_CHECKPATH(filename) */
+#if (PHP_MAJOR_VERSION < 6)
+#define OPENBASEDIR_CHECKPATH(filename) \
+	(PG(safe_mode) && (!php_checkuid(filename, NULL, CHECKUID_CHECK_FILE_AND_DIR))) || php_check_open_basedir(filename TSRMLS_CC)
+#else 
+#define OPENBASEDIR_CHECKPATH(filename) \
+	php_check_open_basedir(filename TSRMLS_CC)
+#endif
+/* }}} */
+
 typedef struct _ze_zip_rsrc {
 	struct zip *za;
 	int index_current;
Index: 5_2_1/ext/zip/zip_stream.c
===================================================================
--- 5_2_1.orig/ext/zip/zip_stream.c
+++ 5_2_1/ext/zip/zip_stream.c
@@ -12,6 +12,7 @@
 #include "ext/standard/file.h"
 #include "ext/standard/php_string.h"
 #include "fopen_wrappers.h"
+#include "php_zip.h"
 
 #include "ext/standard/url.h"
 
@@ -112,6 +113,10 @@ php_stream *php_stream_zip_open(char *fi
 	}
 
 	if (filename) {
+		if (OPENBASEDIR_CHECKPATH(filename)) {
+			return NULL;
+		}
+
 		/* duplicate to make the stream za independent (esp. for MSHUTDOWN) */
 		stream_za = zip_open(filename, ZIP_CREATE, &err);
 		if (!stream_za) {
@@ -189,6 +194,11 @@ php_stream *php_stream_zip_opener(php_st
 	php_basename(path, path_len - fragment_len, NULL, 0, &file_basename, &file_basename_len TSRMLS_CC);
 	fragment++;
 
+	if (OPENBASEDIR_CHECKPATH(file_dirname)) {
+		efree(file_basename);
+		return NULL;
+	}
+
 	za = zip_open(file_dirname, ZIP_CREATE, &err);
 	if (za) {
 		zf = zip_fopen(za, fragment, 0);
Index: 5_2_1/ext/bz2/bz2.c
===================================================================
--- 5_2_1.orig/ext/bz2/bz2.c
+++ 5_2_1/ext/bz2/bz2.c
@@ -225,6 +225,10 @@ PHP_BZ2_API php_stream *_php_stream_bz2o
 #else
 	path_copy = path;
 #endif  
+
+	if ((PG(safe_mode) && (!php_checkuid(path_copy, NULL, CHECKUID_CHECK_FILE_AND_DIR))) || php_check_open_basedir(path_copy TSRMLS_CC)) {
+		return NULL;
+	}
 	
 	/* try and open it directly first */
 	bz_file = BZ2_bzopen(path_copy, mode);
@@ -236,7 +240,7 @@ PHP_BZ2_API php_stream *_php_stream_bz2o
 	
 	if (bz_file == NULL) {
 		/* that didn't work, so try and get something from the network/wrapper */
-		stream = php_stream_open_wrapper(path, mode, options | STREAM_WILL_CAST, opened_path);
+		stream = php_stream_open_wrapper(path, mode, options | STREAM_WILL_CAST | ENFORCE_SAFE_MODE, opened_path);
 	
 		if (stream) {
 			int fd;
@@ -562,13 +566,13 @@ static PHP_FUNCTION(bzdecompress)
 		/* compression is better then 2:1, need to allocate more memory */
 		bzs.avail_out = source_len;
 		size = (bzs.total_out_hi32 * (unsigned int) -1) + bzs.total_out_lo32;
-		dest = erealloc(dest, size + bzs.avail_out + 1);
+		dest = safe_erealloc(dest, 1, bzs.avail_out+1, size );
 		bzs.next_out = dest + size;
 	}
 
 	if (error == BZ_STREAM_END || error == BZ_OK) {
 		size = (bzs.total_out_hi32 * (unsigned int) -1) + bzs.total_out_lo32;
-		dest = erealloc(dest, size + 1);
+		dest = safe_erealloc(dest, 1, size, 1);
 		dest[size] = '\0';
 		RETVAL_STRINGL(dest, size, 0);
 	} else { /* real error */
Index: 5_2_1/ext/standard/basic_functions.c
===================================================================
--- 5_2_1.orig/ext/standard/basic_functions.c
+++ 5_2_1/ext/standard/basic_functions.c
@@ -6126,6 +6126,12 @@ static void php_simple_ini_parser_cb(zva
 				}
 			}
 
+			if (Z_TYPE_P(hash) != IS_ARRAY) {
+				zval_dtor(hash);
+				INIT_PZVAL(hash);
+				array_init(hash);
+			}
+
 			ALLOC_ZVAL(element);
 			*element = *arg2;
 			zval_copy_ctor(element);
@@ -6234,7 +6240,34 @@ static int copy_request_variable(void *p
 			return 0;
 		} else if (!strcmp(hash_key->arKey, "GLOBALS")) {
 			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Attempted GLOBALS variable overwrite.");
-			return 0; 
+			return 0;
+		} else if (*hash_key->arKey == '_' &&
+				(
+				 !strcmp(hash_key->arKey, "_GET") ||
+				 !strcmp(hash_key->arKey, "_POST") ||
+				 !strcmp(hash_key->arKey, "_COOKIE") ||
+				 !strcmp(hash_key->arKey, "_ENV") ||
+				 !strcmp(hash_key->arKey, "_SERVER") ||
+				 !strcmp(hash_key->arKey, "_SESSION") ||
+				 !strcmp(hash_key->arKey, "_FILES") ||
+				 !strcmp(hash_key->arKey, "_REQUEST")
+				)
+				) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Attempted super-global (%s) variable overwrite.", hash_key->arKey);
+			return 0;
+		} else if (*hash_key->arKey == 'H' &&
+				(
+				 !strcmp(hash_key->arKey, "HTTP_POST_VARS") ||
+				 !strcmp(hash_key->arKey, "HTTP_GET_VARS") ||
+				 !strcmp(hash_key->arKey, "HTTP_COOKIE_VARS") ||
+				 !strcmp(hash_key->arKey, "HTTP_ENV_VARS") ||
+				 !strcmp(hash_key->arKey, "HTTP_SERVER_VARS") ||
+				 !strcmp(hash_key->arKey, "HTTP_RAW_POST_DATA") ||
+				 !strcmp(hash_key->arKey, "HTTP_POST_FILES")
+				)
+				) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Attempted long input array (%s) overwrite.", hash_key->arKey);
+			return 0;
 		}
 	}
 
Index: 5_2_1/ext/pdo/pdo_stmt.c
===================================================================
--- 5_2_1.orig/ext/pdo/pdo_stmt.c
+++ 5_2_1/ext/pdo/pdo_stmt.c
@@ -251,7 +251,10 @@ static void param_dtor(void *data) /* {{
 		efree(param->name);
 	}
 
-	zval_ptr_dtor(&(param->parameter));
+	if (param->parameter) {
+		zval_ptr_dtor(&(param->parameter));
+		param->parameter = NULL;
+	}
 	if (param->driver_params) {
 		zval_ptr_dtor(&(param->driver_params));
 	}
@@ -1557,7 +1560,10 @@ static int register_bound_param(INTERNAL
 
 	ZVAL_ADDREF(param.parameter);
 	if (!really_register_bound_param(&param, stmt, is_param TSRMLS_CC)) {
-		zval_ptr_dtor(&(param.parameter));
+		if (param.parameter) {
+			zval_ptr_dtor(&(param.parameter));
+			param.parameter = NULL;
+		}
 		return 0;
 	}
 	return 1;
@@ -1590,7 +1596,10 @@ static PHP_METHOD(PDOStatement, bindValu
 	
 	ZVAL_ADDREF(param.parameter);
 	if (!really_register_bound_param(&param, stmt, TRUE TSRMLS_CC)) {
-		zval_ptr_dtor(&(param.parameter));
+		if (param.parameter) {
+			zval_ptr_dtor(&(param.parameter));
+			param.parameter = NULL;
+		}
 		RETURN_FALSE;
 	}
 	RETURN_TRUE;
Index: 5_2_1/Zend/zend_execute.c
===================================================================
--- 5_2_1.orig/Zend/zend_execute.c
+++ 5_2_1/Zend/zend_execute.c
@@ -732,10 +732,11 @@ static inline void zend_assign_to_variab
  			if (variable_ptr != value) {
  				zend_uint refcount = variable_ptr->refcount;
  				zval garbage;
- 
+#ifndef ZEND_WIN32
  				if (type != IS_TMP_VAR) {
  					value->refcount++;
  				}
+#endif
  				garbage = *variable_ptr;
  				*variable_ptr = *value;
  				variable_ptr->refcount = refcount;
@@ -743,7 +744,9 @@ static inline void zend_assign_to_variab
  				zend_error(E_STRICT, "Implicit cloning object of class '%s' because of 'zend.ze1_compatibility_mode'", class_name);
  				variable_ptr->value.obj = Z_OBJ_HANDLER_P(value, clone_obj)(value TSRMLS_CC);
  				if (type != IS_TMP_VAR) {
+#ifndef ZEND_WIN32
  					value->refcount--;
+#endif
  				}
  				zendi_zval_dtor(garbage);
  			}
@@ -771,17 +774,20 @@ static inline void zend_assign_to_variab
 		if (variable_ptr!=value) {
 			zend_uint refcount = variable_ptr->refcount;
 			zval garbage;
-
+#ifndef ZEND_WIN32
 			if (type!=IS_TMP_VAR) {
 				value->refcount++;
 			}
+#endif
 			garbage = *variable_ptr;
 			*variable_ptr = *value;
 			variable_ptr->refcount = refcount;
 			variable_ptr->is_ref = 1;
 			if (type!=IS_TMP_VAR) {
 				zendi_zval_copy_ctor(*variable_ptr);
+#ifndef ZEND_WIN32
 				value->refcount--;
+#endif
 			}
 			zendi_zval_dtor(garbage);
 		}
Index: 5_2_1/ext/session/session.c
===================================================================
--- 5_2_1.orig/ext/session/session.c
+++ 5_2_1/ext/session/session.c
@@ -848,6 +848,7 @@ new_session:
 	} else if (PS(invalid_session_id)) { /* address instances where the session read fails due to an invalid id */
 		PS(invalid_session_id) = 0;
 		efree(PS(id));
+		PS(id) = NULL;
 		goto new_session;
 	}
 }
@@ -1577,6 +1578,7 @@ PHP_FUNCTION(session_regenerate_id)
 				RETURN_FALSE;
 			}
 			efree(PS(id));
+			PS(id) = NULL;
 		}
 	
 		PS(id) = PS(mod)->s_create_sid(&PS(mod_data), NULL TSRMLS_CC);
Index: 5_2_1/main/main.c
===================================================================
--- 5_2_1.orig/main/main.c
+++ 5_2_1/main/main.c
@@ -304,7 +304,7 @@ PHP_INI_BEGIN()
 	STD_PHP_INI_ENTRY("upload_max_filesize",	"2M",		PHP_INI_SYSTEM|PHP_INI_PERDIR,		OnUpdateLong,			upload_max_filesize,	php_core_globals,	core_globals)
 	STD_PHP_INI_ENTRY("post_max_size",			"8M",		PHP_INI_SYSTEM|PHP_INI_PERDIR,		OnUpdateLong,			post_max_size,			sapi_globals_struct,sapi_globals)
 	STD_PHP_INI_ENTRY("upload_tmp_dir",			NULL,		PHP_INI_SYSTEM,		OnUpdateStringUnempty,	upload_tmp_dir,			php_core_globals,	core_globals)
-
+	STD_PHP_INI_ENTRY("max_input_nesting_level", "64",		PHP_INI_SYSTEM|PHP_INI_PERDIR,		OnUpdateLongGEZero,	max_input_nesting_level,			php_core_globals,	core_globals)
 	STD_PHP_INI_ENTRY("user_dir",				NULL,		PHP_INI_SYSTEM,		OnUpdateString,			user_dir,				php_core_globals,	core_globals)
 	STD_PHP_INI_ENTRY("variables_order",		"EGPCS",	PHP_INI_SYSTEM|PHP_INI_PERDIR,		OnUpdateStringUnempty,	variables_order,		php_core_globals,	core_globals)
 
Index: 5_2_1/main/php_globals.h
===================================================================
--- 5_2_1.orig/main/php_globals.h
+++ 5_2_1/main/php_globals.h
@@ -155,6 +155,7 @@ struct _php_core_globals {
 #ifdef PHP_WIN32
 	zend_bool com_initialized;
 #endif
+	long max_input_nesting_level;
 };
 
 
Index: 5_2_1/main/php_variables.c
===================================================================
--- 5_2_1.orig/main/php_variables.c
+++ 5_2_1/main/php_variables.c
@@ -119,10 +119,16 @@ PHPAPI void php_register_variable_ex(cha
 	index_len = var_len;
 
 	if (is_array) {
+		int nest_level = 0;
 		while (1) {
 			char *index_s;
 			int new_idx_len = 0;
 
+			if(++nest_level > PG(max_input_nesting_level)) {
+				/* too many levels of nesting */
+				php_error_docref(NULL TSRMLS_CC, E_ERROR, "Input variable nesting level more than allowed %d (change max_input_nesting_level in php.ini to increase the limit)", PG(max_input_nesting_level));
+			}
+
 			ip++;
 			index_s = ip;
 			if (isspace(*ip)) {
Index: 5_2_1/ext/standard/var_unserializer.c
===================================================================
--- 5_2_1.orig/ext/standard/var_unserializer.c
+++ 5_2_1/ext/standard/var_unserializer.c
@@ -1,9 +1,9 @@
-/* Generated by re2c 0.9.12 on Thu Dec 14 15:59:31 2006 */
+/* Generated by re2c 0.11.2 on Mon Mar 26 22:47:06 2007 */
 /*
   +----------------------------------------------------------------------+
   | PHP Version 5                                                        |
   +----------------------------------------------------------------------+
-  | Copyright (c) 1997-2007 The PHP Group                                |
+  | Copyright (c) 1997-2006 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
@@ -139,12 +139,18 @@ PHPAPI void var_destroy(php_unserialize_
 
 /* }}} */
 
-static char *unserialize_str(const unsigned char **p, int len)
+static char *unserialize_str(const unsigned char **p, size_t *len)
 {
-	int i, j;
-	char *str = emalloc(len+1);
+	size_t i, j;
+	char *str = safe_emalloc(*len, 1, 1);
+	unsigned char *end = *p+*len;
 
-	for (i = 0; i < len; i++) {
+	if(end < *p) {
+		efree(str);
+		return NULL;
+	}
+
+	for (i = 0; i < *len && *p < end; i++) {
 		if (**p != '\\') {
 			str[i] = (char)**p;
 		} else {
@@ -168,6 +174,7 @@ static char *unserialize_str(const unsig
 		(*p)++;
 	}
 	str[i] = 0;
+	*len = i;
 	return str;
 }
 
@@ -385,150 +392,144 @@ PHPAPI int php_var_unserialize(UNSERIALI
 	
 	
 {
-	static unsigned char yybm[] = {
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	128, 128, 128, 128, 128, 128, 128, 128, 
-	128, 128,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
-	  0,   0,   0,   0,   0,   0,   0,   0, 
+	static const unsigned char yybm[] = {
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
 	};
 
-{
-	YYCTYPE yych;
-	unsigned int yyaccept = 0;
-	goto yy0;
-	++YYCURSOR;
-yy0:
-	if((YYLIMIT - YYCURSOR) < 7) YYFILL(7);
-	yych = *YYCURSOR;
-	switch(yych){
-	case 'C':	case 'O':	goto yy13;
-	case 'N':	goto yy5;
-	case 'R':	goto yy2;
-	case 'S':	goto yy10;
-	case 'a':	goto yy11;
-	case 'b':	goto yy6;
-	case 'd':	goto yy8;
-	case 'i':	goto yy7;
-	case 'o':	goto yy12;
-	case 'r':	goto yy4;
-	case 's':	goto yy9;
-	case '}':	goto yy14;
-	default:	goto yy16;
-	}
-yy2:	yyaccept = 0;
-	yych = *(YYMARKER = ++YYCURSOR);
-	if(yych == ':')	goto yy95;
-	goto yy3;
+	{
+		YYCTYPE yych;
+
+		if((YYLIMIT - YYCURSOR) < 7) YYFILL(7);
+		yych = *YYCURSOR;
+		switch(yych) {
+		case 'C':
+		case 'O':	goto yy13;
+		case 'N':	goto yy5;
+		case 'R':	goto yy2;
+		case 'S':	goto yy10;
+		case 'a':	goto yy11;
+		case 'b':	goto yy6;
+		case 'd':	goto yy8;
+		case 'i':	goto yy7;
+		case 'o':	goto yy12;
+		case 'r':	goto yy4;
+		case 's':	goto yy9;
+		case '}':	goto yy14;
+		default:	goto yy16;
+		}
+yy2:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if(yych == ':') goto yy95;
 yy3:
-{ return 0; }
-yy4:	yyaccept = 0;
-	yych = *(YYMARKER = ++YYCURSOR);
-	if(yych == ':')	goto yy89;
-	goto yy3;
-yy5:	yych = *++YYCURSOR;
-	if(yych == ';')	goto yy87;
-	goto yy3;
-yy6:	yyaccept = 0;
-	yych = *(YYMARKER = ++YYCURSOR);
-	if(yych == ':')	goto yy83;
-	goto yy3;
-yy7:	yyaccept = 0;
-	yych = *(YYMARKER = ++YYCURSOR);
-	if(yych == ':')	goto yy77;
-	goto yy3;
-yy8:	yyaccept = 0;
-	yych = *(YYMARKER = ++YYCURSOR);
-	if(yych == ':')	goto yy53;
-	goto yy3;
-yy9:	yyaccept = 0;
-	yych = *(YYMARKER = ++YYCURSOR);
-	if(yych == ':')	goto yy46;
-	goto yy3;
-yy10:	yyaccept = 0;
-	yych = *(YYMARKER = ++YYCURSOR);
-	if(yych == ':')	goto yy39;
-	goto yy3;
-yy11:	yyaccept = 0;
-	yych = *(YYMARKER = ++YYCURSOR);
-	if(yych == ':')	goto yy32;
-	goto yy3;
-yy12:	yyaccept = 0;
-	yych = *(YYMARKER = ++YYCURSOR);
-	if(yych == ':')	goto yy25;
-	goto yy3;
-yy13:	yyaccept = 0;
-	yych = *(YYMARKER = ++YYCURSOR);
-	if(yych == ':')	goto yy17;
-	goto yy3;
-yy14:	++YYCURSOR;
-	goto yy15;
-yy15:
-{
+		{ return 0; }
+yy4:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if(yych == ':') goto yy89;
+		goto yy3;
+yy5:
+		yych = *++YYCURSOR;
+		if(yych == ';') goto yy87;
+		goto yy3;
+yy6:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if(yych == ':') goto yy83;
+		goto yy3;
+yy7:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if(yych == ':') goto yy77;
+		goto yy3;
+yy8:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if(yych == ':') goto yy53;
+		goto yy3;
+yy9:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if(yych == ':') goto yy46;
+		goto yy3;
+yy10:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if(yych == ':') goto yy39;
+		goto yy3;
+yy11:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if(yych == ':') goto yy32;
+		goto yy3;
+yy12:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if(yych == ':') goto yy25;
+		goto yy3;
+yy13:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if(yych == ':') goto yy17;
+		goto yy3;
+yy14:
+		++YYCURSOR;
+		{
 	/* this is the case where we have less data than planned */
 	php_error_docref(NULL TSRMLS_CC, E_NOTICE, "Unexpected end of serialized data");
 	return 0; /* not sure if it should be 0 or 1 here? */
 }
-yy16:	yych = *++YYCURSOR;
-	goto yy3;
-yy17:	yych = *++YYCURSOR;
-	if(yybm[0+yych] & 128) {
-		goto yy20;
-	}
-	if(yych == '+')	goto yy19;
-	goto yy18;
-yy18:	YYCURSOR = YYMARKER;
-	switch(yyaccept){
-	case 0:	goto yy3;
-	}
-yy19:	yych = *++YYCURSOR;
-	if(yybm[0+yych] & 128) {
-		goto yy20;
-	}
-	goto yy18;
-yy20:	++YYCURSOR;
-	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
-	yych = *YYCURSOR;
-	goto yy21;
-yy21:	if(yybm[0+yych] & 128) {
-		goto yy20;
-	}
-	if(yych != ':')	goto yy18;
-	goto yy22;
-yy22:	yych = *++YYCURSOR;
-	if(yych != '"')	goto yy18;
-	goto yy23;
-yy23:	++YYCURSOR;
-	goto yy24;
-yy24:
-{
+yy16:
+		yych = *++YYCURSOR;
+		goto yy3;
+yy17:
+		yych = *++YYCURSOR;
+		if(yybm[0+yych] & 128) {
+			goto yy20;
+		}
+		if(yych == '+') goto yy19;
+yy18:
+		YYCURSOR = YYMARKER;
+		goto yy3;
+yy19:
+		yych = *++YYCURSOR;
+		if(yybm[0+yych] & 128) {
+			goto yy20;
+		}
+		goto yy18;
+yy20:
+		++YYCURSOR;
+		if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+		yych = *YYCURSOR;
+		if(yybm[0+yych] & 128) {
+			goto yy20;
+		}
+		if(yych != ':') goto yy18;
+		yych = *++YYCURSOR;
+		if(yych != '"') goto yy18;
+		++YYCURSOR;
+		{
 	size_t len, len2, len3, maxlen;
 	long elements;
 	char *class_name;
@@ -639,65 +640,58 @@ yy24:
 
 	return object_common2(UNSERIALIZE_PASSTHRU, elements);
 }
-yy25:	yych = *++YYCURSOR;
-	if(yych <= ','){
-		if(yych != '+')	goto yy18;
-		goto yy26;
-	} else {
-		if(yych <= '-')	goto yy26;
-		if(yych <= '/')	goto yy18;
-		if(yych <= '9')	goto yy27;
-		goto yy18;
-	}
-yy26:	yych = *++YYCURSOR;
-	if(yych <= '/')	goto yy18;
-	if(yych >= ':')	goto yy18;
-	goto yy27;
-yy27:	++YYCURSOR;
-	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
-	yych = *YYCURSOR;
-	goto yy28;
-yy28:	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy27;
-	if(yych >= ';')	goto yy18;
-	goto yy29;
-yy29:	yych = *++YYCURSOR;
-	if(yych != '"')	goto yy18;
-	goto yy30;
-yy30:	++YYCURSOR;
-	goto yy31;
-yy31:
-{
+yy25:
+		yych = *++YYCURSOR;
+		if(yych <= ',') {
+			if(yych != '+') goto yy18;
+		} else {
+			if(yych <= '-') goto yy26;
+			if(yych <= '/') goto yy18;
+			if(yych <= '9') goto yy27;
+			goto yy18;
+		}
+yy26:
+		yych = *++YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych >= ':') goto yy18;
+yy27:
+		++YYCURSOR;
+		if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+		yych = *YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy27;
+		if(yych >= ';') goto yy18;
+		yych = *++YYCURSOR;
+		if(yych != '"') goto yy18;
+		++YYCURSOR;
+		{
 
 	INIT_PZVAL(*rval);
 	
 	return object_common2(UNSERIALIZE_PASSTHRU,
 			object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));
 }
-yy32:	yych = *++YYCURSOR;
-	if(yych == '+')	goto yy33;
-	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy34;
-	goto yy18;
-yy33:	yych = *++YYCURSOR;
-	if(yych <= '/')	goto yy18;
-	if(yych >= ':')	goto yy18;
-	goto yy34;
-yy34:	++YYCURSOR;
-	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
-	yych = *YYCURSOR;
-	goto yy35;
-yy35:	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy34;
-	if(yych >= ';')	goto yy18;
-	goto yy36;
-yy36:	yych = *++YYCURSOR;
-	if(yych != '{')	goto yy18;
-	goto yy37;
-yy37:	++YYCURSOR;
-	goto yy38;
-yy38:
-{
+yy32:
+		yych = *++YYCURSOR;
+		if(yych == '+') goto yy33;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy34;
+		goto yy18;
+yy33:
+		yych = *++YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych >= ':') goto yy18;
+yy34:
+		++YYCURSOR;
+		if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+		yych = *YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy34;
+		if(yych >= ';') goto yy18;
+		yych = *++YYCURSOR;
+		if(yych != '{') goto yy18;
+		++YYCURSOR;
+		{
 	long elements = parse_iv(start + 2);
 	/* use iv() not uiv() in order to check data range */
 	*p = YYCURSOR;
@@ -718,30 +712,27 @@ yy38:
 
 	return finish_nested_data(UNSERIALIZE_PASSTHRU);
 }
-yy39:	yych = *++YYCURSOR;
-	if(yych == '+')	goto yy40;
-	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy41;
-	goto yy18;
-yy40:	yych = *++YYCURSOR;
-	if(yych <= '/')	goto yy18;
-	if(yych >= ':')	goto yy18;
-	goto yy41;
-yy41:	++YYCURSOR;
-	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
-	yych = *YYCURSOR;
-	goto yy42;
-yy42:	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy41;
-	if(yych >= ';')	goto yy18;
-	goto yy43;
-yy43:	yych = *++YYCURSOR;
-	if(yych != '"')	goto yy18;
-	goto yy44;
-yy44:	++YYCURSOR;
-	goto yy45;
-yy45:
-{
+yy39:
+		yych = *++YYCURSOR;
+		if(yych == '+') goto yy40;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy41;
+		goto yy18;
+yy40:
+		yych = *++YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych >= ':') goto yy18;
+yy41:
+		++YYCURSOR;
+		if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+		yych = *YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy41;
+		if(yych >= ';') goto yy18;
+		yych = *++YYCURSOR;
+		if(yych != '"') goto yy18;
+		++YYCURSOR;
+		{
 	size_t len, maxlen;
 	char *str;
 
@@ -752,7 +743,7 @@ yy45:
 		return 0;
 	}
 
-	if ((str = unserialize_str(&YYCURSOR, len)) == NULL) {
+	if ((str = unserialize_str(&YYCURSOR, &len)) == NULL) {
 		return 0;
 	}
 
@@ -769,30 +760,27 @@ yy45:
 	ZVAL_STRINGL(*rval, str, len, 0);
 	return 1;
 }
-yy46:	yych = *++YYCURSOR;
-	if(yych == '+')	goto yy47;
-	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy48;
-	goto yy18;
-yy47:	yych = *++YYCURSOR;
-	if(yych <= '/')	goto yy18;
-	if(yych >= ':')	goto yy18;
-	goto yy48;
-yy48:	++YYCURSOR;
-	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
-	yych = *YYCURSOR;
-	goto yy49;
-yy49:	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy48;
-	if(yych >= ';')	goto yy18;
-	goto yy50;
-yy50:	yych = *++YYCURSOR;
-	if(yych != '"')	goto yy18;
-	goto yy51;
-yy51:	++YYCURSOR;
-	goto yy52;
-yy52:
-{
+yy46:
+		yych = *++YYCURSOR;
+		if(yych == '+') goto yy47;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy48;
+		goto yy18;
+yy47:
+		yych = *++YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych >= ':') goto yy18;
+yy48:
+		++YYCURSOR;
+		if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+		yych = *YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy48;
+		if(yych >= ';') goto yy18;
+		yych = *++YYCURSOR;
+		if(yych != '"') goto yy18;
+		++YYCURSOR;
+		{
 	size_t len, maxlen;
 	char *str;
 
@@ -819,160 +807,158 @@ yy52:
 	ZVAL_STRINGL(*rval, str, len, 1);
 	return 1;
 }
-yy53:	yych = *++YYCURSOR;
-	if(yych <= '/'){
-		if(yych <= ','){
-			if(yych == '+')	goto yy57;
-			goto yy18;
-		} else {
-			if(yych <= '-')	goto yy55;
-			if(yych <= '.')	goto yy60;
-			goto yy18;
-		}
-	} else {
-		if(yych <= 'I'){
-			if(yych <= '9')	goto yy58;
-			if(yych <= 'H')	goto yy18;
-			goto yy56;
+yy53:
+		yych = *++YYCURSOR;
+		if(yych <= '/') {
+			if(yych <= ',') {
+				if(yych == '+') goto yy57;
+				goto yy18;
+			} else {
+				if(yych <= '-') goto yy55;
+				if(yych <= '.') goto yy60;
+				goto yy18;
+			}
 		} else {
-			if(yych != 'N')	goto yy18;
-			goto yy54;
+			if(yych <= 'I') {
+				if(yych <= '9') goto yy58;
+				if(yych <= 'H') goto yy18;
+				goto yy56;
+			} else {
+				if(yych != 'N') goto yy18;
+			}
 		}
-	}
-yy54:	yych = *++YYCURSOR;
-	if(yych == 'A')	goto yy76;
-	goto yy18;
-yy55:	yych = *++YYCURSOR;
-	if(yych <= '/'){
-		if(yych == '.')	goto yy60;
+		yych = *++YYCURSOR;
+		if(yych == 'A') goto yy76;
 		goto yy18;
-	} else {
-		if(yych <= '9')	goto yy58;
-		if(yych != 'I')	goto yy18;
-		goto yy56;
-	}
-yy56:	yych = *++YYCURSOR;
-	if(yych == 'N')	goto yy72;
-	goto yy18;
-yy57:	yych = *++YYCURSOR;
-	if(yych == '.')	goto yy60;
-	if(yych <= '/')	goto yy18;
-	if(yych >= ':')	goto yy18;
-	goto yy58;
-yy58:	++YYCURSOR;
-	if((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
-	yych = *YYCURSOR;
-	goto yy59;
-yy59:	if(yych <= ':'){
-		if(yych <= '.'){
-			if(yych <= '-')	goto yy18;
-			goto yy70;
-		} else {
-			if(yych <= '/')	goto yy18;
-			if(yych <= '9')	goto yy58;
+yy55:
+		yych = *++YYCURSOR;
+		if(yych <= '/') {
+			if(yych == '.') goto yy60;
 			goto yy18;
+		} else {
+			if(yych <= '9') goto yy58;
+			if(yych != 'I') goto yy18;
 		}
-	} else {
-		if(yych <= 'E'){
-			if(yych <= ';')	goto yy63;
-			if(yych <= 'D')	goto yy18;
-			goto yy65;
+yy56:
+		yych = *++YYCURSOR;
+		if(yych == 'N') goto yy72;
+		goto yy18;
+yy57:
+		yych = *++YYCURSOR;
+		if(yych == '.') goto yy60;
+		if(yych <= '/') goto yy18;
+		if(yych >= ':') goto yy18;
+yy58:
+		++YYCURSOR;
+		if((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
+		yych = *YYCURSOR;
+		if(yych <= ':') {
+			if(yych <= '.') {
+				if(yych <= '-') goto yy18;
+				goto yy70;
+			} else {
+				if(yych <= '/') goto yy18;
+				if(yych <= '9') goto yy58;
+				goto yy18;
+			}
 		} else {
-			if(yych == 'e')	goto yy65;
-			goto yy18;
+			if(yych <= 'E') {
+				if(yych <= ';') goto yy63;
+				if(yych <= 'D') goto yy18;
+				goto yy65;
+			} else {
+				if(yych == 'e') goto yy65;
+				goto yy18;
+			}
 		}
-	}
-yy60:	yych = *++YYCURSOR;
-	if(yych <= '/')	goto yy18;
-	if(yych >= ':')	goto yy18;
-	goto yy61;
-yy61:	++YYCURSOR;
-	if((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
-	yych = *YYCURSOR;
-	goto yy62;
-yy62:	if(yych <= ';'){
-		if(yych <= '/')	goto yy18;
-		if(yych <= '9')	goto yy61;
-		if(yych <= ':')	goto yy18;
-		goto yy63;
-	} else {
-		if(yych <= 'E'){
-			if(yych <= 'D')	goto yy18;
-			goto yy65;
+yy60:
+		yych = *++YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych >= ':') goto yy18;
+yy61:
+		++YYCURSOR;
+		if((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
+		yych = *YYCURSOR;
+		if(yych <= ';') {
+			if(yych <= '/') goto yy18;
+			if(yych <= '9') goto yy61;
+			if(yych <= ':') goto yy18;
 		} else {
-			if(yych == 'e')	goto yy65;
-			goto yy18;
+			if(yych <= 'E') {
+				if(yych <= 'D') goto yy18;
+				goto yy65;
+			} else {
+				if(yych == 'e') goto yy65;
+				goto yy18;
+			}
 		}
-	}
-yy63:	++YYCURSOR;
-	goto yy64;
-yy64:
-{
+yy63:
+		++YYCURSOR;
+		{
 	*p = YYCURSOR;
 	INIT_PZVAL(*rval);
 	ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));
 	return 1;
 }
-yy65:	yych = *++YYCURSOR;
-	if(yych <= ','){
-		if(yych != '+')	goto yy18;
-		goto yy66;
-	} else {
-		if(yych <= '-')	goto yy66;
-		if(yych <= '/')	goto yy18;
-		if(yych <= '9')	goto yy67;
+yy65:
+		yych = *++YYCURSOR;
+		if(yych <= ',') {
+			if(yych != '+') goto yy18;
+		} else {
+			if(yych <= '-') goto yy66;
+			if(yych <= '/') goto yy18;
+			if(yych <= '9') goto yy67;
+			goto yy18;
+		}
+yy66:
+		yych = *++YYCURSOR;
+		if(yych <= ',') {
+			if(yych == '+') goto yy69;
+			goto yy18;
+		} else {
+			if(yych <= '-') goto yy69;
+			if(yych <= '/') goto yy18;
+			if(yych >= ':') goto yy18;
+		}
+yy67:
+		++YYCURSOR;
+		if(YYLIMIT == YYCURSOR) YYFILL(1);
+		yych = *YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy67;
+		if(yych == ';') goto yy63;
 		goto yy18;
-	}
-yy66:	yych = *++YYCURSOR;
-	if(yych <= ','){
-		if(yych == '+')	goto yy69;
+yy69:
+		yych = *++YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy67;
 		goto yy18;
-	} else {
-		if(yych <= '-')	goto yy69;
-		if(yych <= '/')	goto yy18;
-		if(yych >= ':')	goto yy18;
-		goto yy67;
-	}
-yy67:	++YYCURSOR;
-	if(YYLIMIT == YYCURSOR) YYFILL(1);
-	yych = *YYCURSOR;
-	goto yy68;
-yy68:	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy67;
-	if(yych == ';')	goto yy63;
-	goto yy18;
-yy69:	yych = *++YYCURSOR;
-	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy67;
-	goto yy18;
-yy70:	++YYCURSOR;
-	if((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
-	yych = *YYCURSOR;
-	goto yy71;
-yy71:	if(yych <= ';'){
-		if(yych <= '/')	goto yy18;
-		if(yych <= '9')	goto yy70;
-		if(yych <= ':')	goto yy18;
-		goto yy63;
-	} else {
-		if(yych <= 'E'){
-			if(yych <= 'D')	goto yy18;
-			goto yy65;
+yy70:
+		++YYCURSOR;
+		if((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
+		yych = *YYCURSOR;
+		if(yych <= ';') {
+			if(yych <= '/') goto yy18;
+			if(yych <= '9') goto yy70;
+			if(yych <= ':') goto yy18;
+			goto yy63;
 		} else {
-			if(yych == 'e')	goto yy65;
-			goto yy18;
+			if(yych <= 'E') {
+				if(yych <= 'D') goto yy18;
+				goto yy65;
+			} else {
+				if(yych == 'e') goto yy65;
+				goto yy18;
+			}
 		}
-	}
-yy72:	yych = *++YYCURSOR;
-	if(yych != 'F')	goto yy18;
-	goto yy73;
-yy73:	yych = *++YYCURSOR;
-	if(yych != ';')	goto yy18;
-	goto yy74;
-yy74:	++YYCURSOR;
-	goto yy75;
-yy75:
-{
+yy72:
+		yych = *++YYCURSOR;
+		if(yych != 'F') goto yy18;
+yy73:
+		yych = *++YYCURSOR;
+		if(yych != ';') goto yy18;
+		++YYCURSOR;
+		{
 	*p = YYCURSOR;
 	INIT_PZVAL(*rval);
 
@@ -986,91 +972,82 @@ yy75:
 
 	return 1;
 }
-yy76:	yych = *++YYCURSOR;
-	if(yych == 'N')	goto yy73;
-	goto yy18;
-yy77:	yych = *++YYCURSOR;
-	if(yych <= ','){
-		if(yych != '+')	goto yy18;
-		goto yy78;
-	} else {
-		if(yych <= '-')	goto yy78;
-		if(yych <= '/')	goto yy18;
-		if(yych <= '9')	goto yy79;
+yy76:
+		yych = *++YYCURSOR;
+		if(yych == 'N') goto yy73;
 		goto yy18;
-	}
-yy78:	yych = *++YYCURSOR;
-	if(yych <= '/')	goto yy18;
-	if(yych >= ':')	goto yy18;
-	goto yy79;
-yy79:	++YYCURSOR;
-	if(YYLIMIT == YYCURSOR) YYFILL(1);
-	yych = *YYCURSOR;
-	goto yy80;
-yy80:	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy79;
-	if(yych != ';')	goto yy18;
-	goto yy81;
-yy81:	++YYCURSOR;
-	goto yy82;
-yy82:
-{
+yy77:
+		yych = *++YYCURSOR;
+		if(yych <= ',') {
+			if(yych != '+') goto yy18;
+		} else {
+			if(yych <= '-') goto yy78;
+			if(yych <= '/') goto yy18;
+			if(yych <= '9') goto yy79;
+			goto yy18;
+		}
+yy78:
+		yych = *++YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych >= ':') goto yy18;
+yy79:
+		++YYCURSOR;
+		if(YYLIMIT == YYCURSOR) YYFILL(1);
+		yych = *YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy79;
+		if(yych != ';') goto yy18;
+		++YYCURSOR;
+		{
 	*p = YYCURSOR;
 	INIT_PZVAL(*rval);
 	ZVAL_LONG(*rval, parse_iv(start + 2));
 	return 1;
 }
-yy83:	yych = *++YYCURSOR;
-	if(yych <= '/')	goto yy18;
-	if(yych >= '2')	goto yy18;
-	goto yy84;
-yy84:	yych = *++YYCURSOR;
-	if(yych != ';')	goto yy18;
-	goto yy85;
-yy85:	++YYCURSOR;
-	goto yy86;
-yy86:
-{
+yy83:
+		yych = *++YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych >= '2') goto yy18;
+		yych = *++YYCURSOR;
+		if(yych != ';') goto yy18;
+		++YYCURSOR;
+		{
 	*p = YYCURSOR;
 	INIT_PZVAL(*rval);
 	ZVAL_BOOL(*rval, parse_iv(start + 2));
 	return 1;
 }
-yy87:	++YYCURSOR;
-	goto yy88;
-yy88:
-{
+yy87:
+		++YYCURSOR;
+		{
 	*p = YYCURSOR;
 	INIT_PZVAL(*rval);
 	ZVAL_NULL(*rval);
 	return 1;
 }
-yy89:	yych = *++YYCURSOR;
-	if(yych <= ','){
-		if(yych != '+')	goto yy18;
-		goto yy90;
-	} else {
-		if(yych <= '-')	goto yy90;
-		if(yych <= '/')	goto yy18;
-		if(yych <= '9')	goto yy91;
-		goto yy18;
-	}
-yy90:	yych = *++YYCURSOR;
-	if(yych <= '/')	goto yy18;
-	if(yych >= ':')	goto yy18;
-	goto yy91;
-yy91:	++YYCURSOR;
-	if(YYLIMIT == YYCURSOR) YYFILL(1);
-	yych = *YYCURSOR;
-	goto yy92;
-yy92:	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy91;
-	if(yych != ';')	goto yy18;
-	goto yy93;
-yy93:	++YYCURSOR;
-	goto yy94;
-yy94:
-{
+yy89:
+		yych = *++YYCURSOR;
+		if(yych <= ',') {
+			if(yych != '+') goto yy18;
+		} else {
+			if(yych <= '-') goto yy90;
+			if(yych <= '/') goto yy18;
+			if(yych <= '9') goto yy91;
+			goto yy18;
+		}
+yy90:
+		yych = *++YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych >= ':') goto yy18;
+yy91:
+		++YYCURSOR;
+		if(YYLIMIT == YYCURSOR) YYFILL(1);
+		yych = *YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy91;
+		if(yych != ';') goto yy18;
+		++YYCURSOR;
+		{
 	long id;
 
  	*p = YYCURSOR;
@@ -1092,32 +1069,29 @@ yy94:
 	
 	return 1;
 }
-yy95:	yych = *++YYCURSOR;
-	if(yych <= ','){
-		if(yych != '+')	goto yy18;
-		goto yy96;
-	} else {
-		if(yych <= '-')	goto yy96;
-		if(yych <= '/')	goto yy18;
-		if(yych <= '9')	goto yy97;
-		goto yy18;
-	}
-yy96:	yych = *++YYCURSOR;
-	if(yych <= '/')	goto yy18;
-	if(yych >= ':')	goto yy18;
-	goto yy97;
-yy97:	++YYCURSOR;
-	if(YYLIMIT == YYCURSOR) YYFILL(1);
-	yych = *YYCURSOR;
-	goto yy98;
-yy98:	if(yych <= '/')	goto yy18;
-	if(yych <= '9')	goto yy97;
-	if(yych != ';')	goto yy18;
-	goto yy99;
-yy99:	++YYCURSOR;
-	goto yy100;
-yy100:
-{
+yy95:
+		yych = *++YYCURSOR;
+		if(yych <= ',') {
+			if(yych != '+') goto yy18;
+		} else {
+			if(yych <= '-') goto yy96;
+			if(yych <= '/') goto yy18;
+			if(yych <= '9') goto yy97;
+			goto yy18;
+		}
+yy96:
+		yych = *++YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych >= ':') goto yy18;
+yy97:
+		++YYCURSOR;
+		if(YYLIMIT == YYCURSOR) YYFILL(1);
+		yych = *YYCURSOR;
+		if(yych <= '/') goto yy18;
+		if(yych <= '9') goto yy97;
+		if(yych != ';') goto yy18;
+		++YYCURSOR;
+		{
 	long id;
 
  	*p = YYCURSOR;
@@ -1137,7 +1111,7 @@ yy100:
 	
 	return 1;
 }
-}
+	}
 }
 
 
Index: 5_2_1/ext/standard/var_unserializer.re
===================================================================
--- 5_2_1.orig/ext/standard/var_unserializer.re
+++ 5_2_1/ext/standard/var_unserializer.re
@@ -138,12 +138,18 @@ PHPAPI void var_destroy(php_unserialize_
 
 /* }}} */
 
-static char *unserialize_str(const unsigned char **p, int len)
+static char *unserialize_str(const unsigned char **p, size_t *len)
 {
-	int i, j;
-	char *str = emalloc(len+1);
+	size_t i, j;
+	char *str = safe_emalloc(*len, 1, 1);
+	unsigned char *end = *p+*len;
 
-	for (i = 0; i < len; i++) {
+	if(end < *p) {
+		efree(str);
+		return NULL;
+	}
+
+	for (i = 0; i < *len && *p < end; i++) {
 		if (**p != '\\') {
 			str[i] = (char)**p;
 		} else {
@@ -167,6 +173,7 @@ static char *unserialize_str(const unsig
 		(*p)++;
 	}
 	str[i] = 0;
+	*len = i;
 	return str;
 }
 
@@ -518,7 +525,7 @@ PHPAPI int php_var_unserialize(UNSERIALI
 		return 0;
 	}
 
-	if ((str = unserialize_str(&YYCURSOR, len)) == NULL) {
+	if ((str = unserialize_str(&YYCURSOR, &len)) == NULL) {
 		return 0;
 	}
 
Index: 5_2_1/ext/standard/mail.c
===================================================================
--- 5_2_1.orig/ext/standard/mail.c
+++ 5_2_1/ext/standard/mail.c
@@ -55,6 +55,14 @@
 		continue;											\
 	}													\
 
+#define MAIL_ASCIIZ_CHECK(str, len)			\
+	p = str;					\
+	e = p + len;					\
+	while ((p = memchr(p, '\0', (e - p)))) {		\
+		*p = ' ';				\
+	}						\
+
+
 /* {{{ proto int ezmlm_hash(string addr)
    Calculate EZMLM list hash value. */
 PHP_FUNCTION(ezmlm_hash)
@@ -88,6 +96,7 @@ PHP_FUNCTION(mail)
 	int subject_len, extra_cmd_len, i;
 	char *force_extra_parameters = INI_STR("mail.force_extra_parameters");
 	char *to_r, *subject_r;
+	char *p, *e;
 
 	if (PG(safe_mode) && (ZEND_NUM_ARGS() == 5)) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "SAFE MODE Restriction in effect.  The fifth parameter is disabled in SAFE MODE.");
@@ -104,6 +113,17 @@ PHP_FUNCTION(mail)
 		return;
 	}
 
+	/* ASCIIZ check */
+	MAIL_ASCIIZ_CHECK(to, to_len);
+	MAIL_ASCIIZ_CHECK(subject, subject_len);
+	MAIL_ASCIIZ_CHECK(message, message_len);
+	if (headers) {
+		MAIL_ASCIIZ_CHECK(headers, headers_len);
+	}
+	if (extra_cmd) {
+		MAIL_ASCIIZ_CHECK(extra_cmd, extra_cmd_len);
+	}
+
 	if (to_len > 0) {
 		to_r = estrndup(to, to_len);
 		for (; to_len; to_len--) {
Index: 5_2_1/main/SAPI.c
===================================================================
--- 5_2_1.orig/main/SAPI.c
+++ 5_2_1/main/SAPI.c
@@ -863,6 +863,9 @@ SAPI_API int sapi_register_post_entries(
 
 SAPI_API int sapi_register_post_entry(sapi_post_entry *post_entry TSRMLS_DC)
 {
+	if (SG(sapi_started) && EG(in_execution)) {
+		return FAILURE;
+	}
 	return zend_hash_add(&SG(known_post_content_types),
 			post_entry->content_type, post_entry->content_type_len+1,
 			(void *) post_entry, sizeof(sapi_post_entry), NULL);
@@ -870,6 +873,9 @@ SAPI_API int sapi_register_post_entry(sa
 
 SAPI_API void sapi_unregister_post_entry(sapi_post_entry *post_entry TSRMLS_DC)
 {
+	if (SG(sapi_started) && EG(in_execution)) {
+		return;
+	}
 	zend_hash_del(&SG(known_post_content_types), post_entry->content_type,
 			post_entry->content_type_len+1);
 }
@@ -877,6 +883,10 @@ SAPI_API void sapi_unregister_post_entry
 
 SAPI_API int sapi_register_default_post_reader(void (*default_post_reader)(TSRMLS_D))
 {
+	TSRMLS_FETCH();
+	if (SG(sapi_started) && EG(in_execution)) {
+		return FAILURE;
+	}
 	sapi_module.default_post_reader = default_post_reader;
 	return SUCCESS;
 }
@@ -884,12 +894,20 @@ SAPI_API int sapi_register_default_post_
 
 SAPI_API int sapi_register_treat_data(void (*treat_data)(int arg, char *str, zval *destArray TSRMLS_DC))
 {
+	TSRMLS_FETCH();
+	if (SG(sapi_started) && EG(in_execution)) {
+		return FAILURE;
+	}
 	sapi_module.treat_data = treat_data;
 	return SUCCESS;
 }
 
 SAPI_API int sapi_register_input_filter(unsigned int (*input_filter)(int arg, char *var, char **val, unsigned int val_len, unsigned int *new_val_len TSRMLS_DC))
 {
+	TSRMLS_FETCH();
+	if (SG(sapi_started) && EG(in_execution)) {
+		return FAILURE;
+	}
 	sapi_module.input_filter = input_filter;
 	return SUCCESS;
 }
