--- php-5.3.1/ext/mysqli/mysqli.c	2009-10-14 15:51:25.000000000 +0200
+++ php-5.3.1/ext/mysqli/mysqli.c.mod	2010-01-11 18:04:57.000000000 +0200
@@ -32,7 +32,9 @@
 #include "ext/standard/php_string.h"
 #include "php_mysqli_structs.h"
 #include "zend_exceptions.h"
+#ifdef MYSQLI_USE_MYSQLND
 #include "ext/mysqlnd/mysqlnd_portability.h"
+#endif
 
 ZEND_DECLARE_MODULE_GLOBALS(mysqli)
 static PHP_GINIT_FUNCTION(mysqli);
--- php-5.3.1/ext/mysqli/mysqli_api.c	2009-10-14 15:51:25.000000000 +0200
+++ php-5.3.1/ext/mysqli/mysqli_api.c.mod	2010-01-11 18:25:23.000000000 +0200
@@ -31,7 +31,9 @@
 #include "php_globals.h"
 #include "ext/standard/info.h"
 #include "php_mysqli_structs.h"
+#ifdef MYSQLI_USE_MYSQLND
 #include "ext/mysqlnd/mysqlnd_portability.h"
+#endif
 
 /* {{{ proto mixed mysqli_affected_rows(object link)
    Get number of affected rows in previous MySQL operation */
--- php-5.3.1/ext/mysqli/mysqli_libmysql.h	2010-01-12 15:17:27.000000000 +0200
+++ php-5.3.1/ext/mysqli/mysqli_libmysql.h.mod	2010-01-19 18:07:46.000000000 +0200
@@ -1,6 +1,6 @@
 /*
   +----------------------------------------------------------------------+
-  | PHP Version 6                                                        |
+  | PHP Version 5                                                        |
   +----------------------------------------------------------------------+
   | Copyright (c) 2007 The PHP Group                                     |
   +----------------------------------------------------------------------+
@@ -34,3 +34,62 @@
 #define mysqli_close(c, is_forced)			mysql_close((c))
 #define mysqli_stmt_close(c, implicit)		mysql_stmt_close((c))
 #define mysqli_free_result(r, is_forced)	mysql_free_result((r))
+
+/* These functions also reside in ext/mysqlnd/mysqlnd_portability.h but since it is only made
+ available if one wants to build mysqli against mysqlnd and they are useful for libmysql as 
+ well, we check whether they're not defined [build with libmysql is desired] and define them.
+
+ Bit values are sent in reverted order of bytes, compared to normal !!! */
+#ifndef uint1korr
+#define uint1korr(A)	(*(((uint8_t*)(A))))
+#endif
+
+#ifndef bit_uint2korr
+#define bit_uint2korr(A) ((uint16_t) (((uint16_t) (((zend_uchar*) (A))[1])) +\
+									((uint16_t) (((zend_uchar*) (A))[0]) << 8)))
+#endif
+#ifndef bit_uint3korr
+#define bit_uint3korr(A) ((uint32_t) (((uint32_t) (((zend_uchar*) (A))[2])) +\
+									(((uint32_t) (((zend_uchar*) (A))[1])) << 8) +\
+									(((uint32_t) (((zend_uchar*) (A))[0])) << 16)))
+#endif
+#ifndef bit_uint4korr
+#define bit_uint4korr(A) ((uint32_t) (((uint32_t) (((zend_uchar*) (A))[3])) +\
+									(((uint32_t) (((zend_uchar*) (A))[2])) << 8) +\
+									(((uint32_t) (((zend_uchar*) (A))[1])) << 16) +\
+									(((uint32_t) (((zend_uchar*) (A))[0])) << 24)))
+#endif
+#ifndef bit_uint5korr
+#define bit_uint5korr(A)  ((uint64_t)(((uint32_t) ((zend_uchar) (A)[4])) +\
+                                  (((uint32_t) ((zend_uchar) (A)[3])) << 8) +\
+                                  (((uint32_t) ((zend_uchar) (A)[2])) << 16) +\
+                                  (((uint32_t) ((zend_uchar) (A)[1])) << 24)) +\
+                               (((uint64_t) ((zend_uchar) (A)[0])) << 32))
+#endif
+#ifndef bit_uint6korr
+#define bit_uint6korr(A)	((uint64_t)(((uint32_t) (((zend_uchar*) (A))[5])) +\
+									(((uint32_t) (((zend_uchar*) (A))[4])) << 8) +\
+									(((uint32_t) (((zend_uchar*) (A))[3])) << 16) +\
+									(((uint32_t) (((zend_uchar*) (A))[2])) << 24)) +\
+									(((uint64_t) (((uint32_t) (((zend_uchar*) (A))[1])) +\
+									(((uint32_t) (((zend_uchar*) (A))[0]) << 8)))) << 32))
+#endif
+#ifndef bit_uint7korr
+#define bit_uint7korr(A)	((uint64_t)(((uint32_t) (((zend_uchar*) (A))[6])) +\
+									(((uint32_t) (((zend_uchar*) (A))[5])) << 8) +\
+									(((uint32_t) (((zend_uchar*) (A))[4])) << 16) +\
+									(((uint32_t) (((zend_uchar*) (A))[3])) << 24)) +\
+									(((uint64_t) (((uint32_t) (((zend_uchar*) (A))[2])) +\
+									(((uint32_t) (((zend_uchar*) (A))[1])) << 8) +\
+									(((uint32_t) (((zend_uchar*) (A))[0])) << 16))) << 32))
+#endif
+#ifndef bit_uint8korr
+#define bit_uint8korr(A) ((uint64_t)(((uint32_t) (((zend_uchar*) (A))[7])) +\
+									(((uint32_t) (((zend_uchar*) (A))[6])) << 8) +\
+									(((uint32_t) (((zend_uchar*) (A))[5])) << 16) +\
+									(((uint32_t) (((zend_uchar*) (A))[4])) << 24)) +\
+									(((uint64_t) (((uint32_t) (((zend_uchar*) (A))[3])) +\
+									(((uint32_t) (((zend_uchar*) (A))[2])) << 8) +\
+									(((uint32_t) (((zend_uchar*) (A))[1])) << 16) +\
+									(((uint32_t) (((zend_uchar*) (A))[0])) << 24))) << 32))
+#endif
