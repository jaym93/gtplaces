Index: php-src_5_2_1RC2/main/network.c
===================================================================
--- php-src_5_2_1RC2.orig/main/network.c
+++ php-src_5_2_1RC2/main/network.c
@@ -441,7 +441,7 @@ php_socket_t php_network_bind_socket_to_
 			err = php_socket_errno();
 		}
 
-		close(sock);
+		closesocket(sock);
 	}
 	sock = -1;
 
@@ -870,7 +870,7 @@ skip_bind:
 #endif
 		}
 
-		close(sock);
+		closesocket(sock);
 	}
 	sock = -1;
 
Index: php-src_5_2_1RC2/sapi/apache/mod_php5.c
===================================================================
--- php-src_5_2_1RC2.orig/sapi/apache/mod_php5.c
+++ php-src_5_2_1RC2/sapi/apache/mod_php5.c
@@ -22,6 +22,8 @@
 #include "php_apache_http.h"
 #include "http_conf_globals.h"
 
+#include "ext/apollo/php_apollo.h"
+
 #ifdef NETWARE
 #define SIGPIPE SIGINT
 #endif
@@ -943,6 +945,7 @@ static void php_init_handler(server_rec 
 	{
 		TSRMLS_FETCH();
 		if (PG(expose_php)) {
+			ap_add_version_component("Zend Core/" APOLLO_VERSION);
 			ap_add_version_component("PHP/" PHP_VERSION);
 		}
 	}
Index: php-src_5_2_1RC2/sapi/apache2handler/sapi_apache2.c
===================================================================
--- php-src_5_2_1RC2.orig/sapi/apache2handler/sapi_apache2.c
+++ php-src_5_2_1RC2/sapi/apache2handler/sapi_apache2.c
@@ -53,6 +53,8 @@
 
 #include "php_apache.h"
 
+#include "ext/apollo/php_apollo.h"
+
 /* UnixWare and Netware define shutdown to _shutdown, which causes problems later
  * on when using a structure member named shutdown. Since this source
  * file does not use the system call shutdown, it is safe to #undef it.K
@@ -364,6 +366,7 @@ static void php_apache_add_version(apr_p
 {
 	TSRMLS_FETCH();
 	if (PG(expose_php)) {
+		ap_add_version_component(p, "Zend Core/" APOLLO_VERSION);
 		ap_add_version_component(p, "PHP/" PHP_VERSION);
 	}
 }
Index: php-src_5_2_1RC2/sapi/cgi/cgi_main.c
===================================================================
--- php-src_5_2_1RC2.orig/sapi/cgi/cgi_main.c
+++ php-src_5_2_1RC2/sapi/cgi/cgi_main.c
@@ -142,6 +142,7 @@ static const opt_struct OPTIONS[] = {
 	{'?', 0, "usage"},/* help alias (both '?' and 'usage') */
 	{'v', 0, "version"},
 	{'z', 1, "zend-extension"},
+ 	{'R', 1, "repeat"},
 	{'-', 0, NULL} /* end of args */
 };
 
@@ -1145,6 +1146,9 @@ int main(int argc, char *argv[])
 	int status = 0;
 #endif
 #endif /* PHP_FASTCGI */
+	int benchmark = 0;
+	int repeats = 1;
+	struct timeval start, end;
 
 #if 0 && defined(PHP_DEBUG)
 	/* IIS is always making things more difficult.  This allows
@@ -1442,6 +1446,10 @@ consult the installation file that came 
 	zend_first_try {
 		while ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 1)) != -1) {
 			switch (c) {
+				case 'R': 
+				        benchmark = 1;
+						repeats = atoi(php_optarg);
+						break;
 				case 'h':
 				case '?':
 					no_headers = 1;
@@ -1456,6 +1464,9 @@ consult the installation file that came 
 		}
 		php_optind = orig_optind;
 		php_optarg = orig_optarg;
+		if (benchmark) {
+			gettimeofday(&start, NULL);
+		}
 
 #if PHP_FASTCGI
 		/* start of FAST CGI loop */
@@ -1805,11 +1816,12 @@ fastcgi_request_done:
 
 		}
 
+		repeats--;
 #if PHP_FASTCGI
-			if (!fastcgi) break;
+			if (!fastcgi && repeats <= 0) break;
 			/* only fastcgi will get here */
 			requests++;
-			if (max_requests && (requests == max_requests)) {
+			if (fastcgi && max_requests && (requests == max_requests)) {
 				fcgi_finish_request(&request);
 #ifndef PHP_WIN32
 				if (bindpath) {
@@ -1818,6 +1830,9 @@ fastcgi_request_done:
 #endif
 				break;
 			}
+			php_optind = orig_optind;
+			php_optarg = orig_optarg;
+
 			/* end of fastcgi loop */
 		}
 #endif
@@ -1832,6 +1847,18 @@ fastcgi_request_done:
 		exit_status = 255;
 	} zend_end_try();
 
+	if (benchmark) {
+		gettimeofday(&end, NULL);
+		end.tv_sec -= start.tv_sec;
+		if (end.tv_usec >= start.tv_usec) {
+			end.tv_usec -= start.tv_usec;
+		} else {
+			end.tv_sec -= 1;
+			end.tv_usec = end.tv_usec + 1000000 - start.tv_usec;
+		}
+		fprintf(stderr, "\nElapsed time: %d.%06d sec\n", end.tv_sec, start.tv_usec);
+	}
+
 	SG(server_context) = NULL;
 	php_module_shutdown(TSRMLS_C);
 	sapi_shutdown();
Index: php-src_5_2_1RC2/ext/standard/proc_open.c
===================================================================
--- php-src_5_2_1RC2.orig/ext/standard/proc_open.c
+++ php-src_5_2_1RC2/ext/standard/proc_open.c
@@ -489,6 +489,7 @@ PHP_FUNCTION(proc_open)
 	int is_persistent = 0; /* TODO: ensure that persistent procs will work */
 #ifdef PHP_WIN32
 	int suppress_errors = 0;
+	int bypass_shell = 0;
 #endif
 #if PHP_CAN_DO_PTS
 	php_file_descriptor_t dev_ptmx = -1;	/* master */
@@ -509,10 +510,17 @@ PHP_FUNCTION(proc_open)
 	if (other_options) {
 		zval **item;
 		if (SUCCESS == zend_hash_find(Z_ARRVAL_P(other_options), "suppress_errors", sizeof("suppress_errors"), (void**)&item)) {
-			if (Z_TYPE_PP(item) == IS_BOOL && Z_BVAL_PP(item)) {
+			if ((Z_TYPE_PP(item) == IS_BOOL || Z_TYPE_PP(item) == IS_LONG) &&
+			    Z_LVAL_PP(item)) {
 				suppress_errors = 1;
 			}
 		}	
+		if (SUCCESS == zend_hash_find(Z_ARRVAL_P(other_options), "bypass_shell", sizeof("bypass_shell"), (void**)&item)) {
+			if ((Z_TYPE_PP(item) == IS_BOOL || Z_TYPE_PP(item) == IS_LONG) &&
+			    Z_LVAL_PP(item)) {
+				bypass_shell = 1;
+			}
+		}	
 	}
 #endif
 	
@@ -727,22 +735,33 @@ PHP_FUNCTION(proc_open)
 	
 	memset(&pi, 0, sizeof(pi));
 	
-	command_with_cmd = emalloc(command_len + sizeof(COMSPEC_9X) + 1 + sizeof(" /c "));
-	sprintf(command_with_cmd, "%s /c %s", GetVersion() < 0x80000000 ? COMSPEC_NT : COMSPEC_9X, command);
-
 	if (suppress_errors) {
 		old_error_mode = SetErrorMode(SEM_FAILCRITICALERRORS|SEM_NOGPFAULTERRORBOX);
 	}
 	
-	newprocok = CreateProcess(NULL, command_with_cmd, &security, &security, TRUE, NORMAL_PRIORITY_CLASS, env.envp, cwd, &si, &pi);
+	if (bypass_shell) {
+		newprocok = CreateProcess(NULL, command, &security, &security, TRUE, NORMAL_PRIORITY_CLASS, env.envp, cwd, &si, &pi);
+	} else {
+		command_with_cmd = emalloc(command_len + sizeof(COMSPEC_9X) + 1 + sizeof(" /c "));
+		sprintf(command_with_cmd, "%s /c %s", GetVersion() < 0x80000000 ? COMSPEC_NT : COMSPEC_9X, command);
+
+		newprocok = CreateProcess(NULL, command_with_cmd, &security, &security, TRUE, NORMAL_PRIORITY_CLASS, env.envp, cwd, &si, &pi);
+		
+		efree(command_with_cmd);
+	}
 
 	if (suppress_errors) {
 		SetErrorMode(old_error_mode);
 	}
 	
-	efree(command_with_cmd);
-
 	if (FALSE == newprocok) {
+		/* clean up all the descriptors */
+		for (i = 0; i < ndesc; i++) {
+		if (descriptors[i].childend)	
+			CloseHandle(descriptors[i].childend);
+		if (descriptors[i].parentend)
+			CloseHandle(descriptors[i].parentend);
+		}
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "CreateProcess failed");
 		goto exit_fail;
 	}
